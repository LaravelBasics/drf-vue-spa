# パンくずリスト自動生成ガイド

このテンプレートプロジェクトでは、パンくずリストが自動的に生成されます。  
新しい機能を追加する際も、ルート定義と i18n ファイルを更新するだけで自動的にパンくずリストが表示されます。

---

## 📋 目次

1. [基本的な使い方](#基本的な使い方)
2. [詳細画面の自動挿入](#詳細画面の自動挿入)
3. [新機能の追加方法](#新機能の追加方法)
4. [カスタマイズ方法](#カスタマイズ方法)
5. [トラブルシューティング](#トラブルシューティング)

---

## 🎯 基本的な使い方

### 1. ルート定義に `meta.breadcrumb` を追加

```javascript
// src/router/index.js
{
    path: '/admin/users',
    name: 'UserList',
    component: () => import('@/views/users/UserList.vue'),
    meta: {
        breadcrumb: 'breadcrumbs.users.list', // i18nキーを指定
    },
}
```

### 2. i18n ファイルに翻訳を追加

```javascript
// src/locales/ja.json
{
    "breadcrumbs": {
        "users": {
            "list": "ユーザー"
        }
    }
}
```

### 3. ビューファイルでは何もしない

```vue
<!-- src/views/users/UserList.vue -->
<template>
    <!-- Header を配置するだけ -->
    <Header :app-title="t('pages.users.list.title')" />
</template>
```

**結果:**
```
パンくずリスト: ホーム > 管理 > ユーザー
```

---

## 🔗 詳細画面の自動挿入

編集・削除画面で「詳細」を自動的に挿入できます。

### 1. ルート定義で `breadcrumbParent` を指定

```javascript
// src/router/index.js
{
    path: 'users',
    meta: {
        breadcrumb: 'breadcrumbs.users.list', // 一覧
    },
    children: [
        {
            path: ':id',
            name: 'UserDetail',
            component: () => import('@/views/users/UserDetail.vue'),
            meta: {
                breadcrumb: 'breadcrumbs.users.detail', // 詳細
            },
        },
        {
            path: ':id/update',
            name: 'UserUpdate',
            component: () => import('@/views/users/UserUpdate.vue'),
            meta: {
                breadcrumb: 'breadcrumbs.users.update', // 編集
                breadcrumbParent: 'UserDetail', // ← 詳細画面を親として指定
            },
        },
    ],
}
```

### 2. i18n ファイルに翻訳を追加

```javascript
{
    "breadcrumbs": {
        "users": {
            "list": "ユーザー",
            "detail": "詳細",
            "update": "編集"
        }
    }
}
```

**結果:**
```
詳細画面: ホーム > 管理 > ユーザー > 詳細
編集画面: ホーム > 管理 > ユーザー > 詳細 > 編集  ← 詳細が自動挿入！
```

---

## ➕ 新機能の追加方法

商品管理を追加する例で説明します。

### ステップ1: routes.js にヘルパー関数を追加

```javascript
// src/constants/routes.js
export const routes = Object.freeze({
    ADMIN: {
        ROOT: '/admin',
        PRODUCTS: {
            SEGMENT: 'products',
            INDEX: '',
            CREATE: 'create',
            DETAIL: ':id',
            UPDATE: ':id/update',
            DELETE: ':id/delete',
        },
    },
});

export const productRoutes = {
    list: () => '/admin/products',
    create: () => '/admin/products/create',
    detail: (id) => `/admin/products/${id}`,
    update: (id) => `/admin/products/${id}/update`,
    delete: (id) => `/admin/products/${id}/delete`,
};
```

### ステップ2: router/index.js にルートを追加

```javascript
// src/router/index.js
{
    path: routes.ADMIN.PRODUCTS.SEGMENT, // 'products'
    meta: {
        breadcrumb: 'breadcrumbs.products.list', // ← .list で終わる
    },
    children: [
        {
            path: routes.ADMIN.PRODUCTS.INDEX,
            name: 'ProductList',
            component: () => import('@/views/products/ProductList.vue'),
        },
        {
            path: routes.ADMIN.PRODUCTS.DETAIL,
            name: 'ProductDetail',
            component: () => import('@/views/products/ProductDetail.vue'),
            meta: {
                breadcrumb: 'breadcrumbs.products.detail',
            },
        },
        {
            path: routes.ADMIN.PRODUCTS.UPDATE,
            name: 'ProductUpdate',
            component: () => import('@/views/products/ProductUpdate.vue'),
            meta: {
                breadcrumb: 'breadcrumbs.products.update',
                breadcrumbParent: 'ProductDetail', // ← これだけ！
            },
        },
    ],
}
```

### ステップ3: i18n ファイルに翻訳を追加

```javascript
// src/locales/ja.json
{
    "breadcrumbs": {
        "products": {
            "list": "商品",
            "detail": "詳細",
            "update": "編集"
        }
    }
}
```

### ステップ4: ビューファイルで使用

```vue
<!-- src/views/products/ProductList.vue -->
<script setup>
import { productRoutes } from '@/constants/routes';

function goToDetail(productId) {
    router.push(productRoutes.detail(productId));
}
</script>

<template>
    <Header :app-title="t('pages.products.list.title')" />
    <!-- パンくずリストは自動生成される -->
</template>
```

**完成！**
```
一覧: ホーム > 管理 > 商品
詳細: ホーム > 管理 > 商品 > 詳細
編集: ホーム > 管理 > 商品 > 詳細 > 編集  ← 自動！
```

---

## 🎨 カスタマイズ方法

特定の画面だけ手動でパンくずリストを定義したい場合。

### 例: ユーザー名を動的に表示

```vue
<script setup>
import { computed } from 'vue';
import { routes } from '@/constants/routes';
import { useI18n } from 'vue-i18n';

const { t } = useI18n();
const user = ref({ username: '山田太郎' });

// カスタムパンくずリスト
const customBreadcrumbs = computed(() => [
    { title: t('breadcrumbs.home'), to: routes.HOME, disabled: false },
    { title: t('breadcrumbs.admin'), to: routes.ADMIN.ROOT, disabled: false },
    { title: user.value.username, disabled: true }, // 動的な値
]);
</script>

<template>
    <!-- カスタムを明示的に渡す -->
    <Header 
        :app-title="t('pages.users.detail.title')"
        :breadcrumbs="customBreadcrumbs"
    />
</template>
```

---

## 🚫 パンくずリストを非表示にする

```javascript
// src/router/index.js
{
    path: '/login',
    name: 'Login',
    component: () => import('@/views/Login.vue'),
    meta: {
        breadcrumb: false, // ← false にする
    },
}
```

または

```vue
<template>
    <!-- 空配列を渡す -->
    <Header 
        :app-title="t('pages.login.title')"
        :breadcrumbs="[]"
    />
</template>
```

---

## 🔧 トラブルシューティング

### Q1: パンくずリストが表示されない

**確認項目:**
1. `router/index.js` で `meta.breadcrumb` が定義されているか
2. i18n ファイルに該当のキーが存在するか
3. `Header.vue` が正しくインポートされているか

```javascript
// ✅ 正しい
meta: {
    breadcrumb: 'breadcrumbs.users.list',
}

// ❌ 間違い
meta: {
    breadcrumb: t('breadcrumbs.users.list'), // t() は使えない
}
```

---

### Q2: 編集画面で詳細が挿入されない

**確認項目:**
1. 一覧画面の `breadcrumb` が `.list` で終わっているか
2. 編集画面に `breadcrumbParent` が定義されているか
3. 詳細画面の `name` と `breadcrumbParent` の値が一致しているか

```javascript
// ✅ 正しい
{
    path: 'users',
    meta: {
        breadcrumb: 'breadcrumbs.users.list', // .list で終わる
    },
    children: [
        {
            path: ':id',
            name: 'UserDetail', // ← この名前
            meta: { breadcrumb: 'breadcrumbs.users.detail' },
        },
        {
            path: ':id/update',
            meta: {
                breadcrumb: 'breadcrumbs.users.update',
                breadcrumbParent: 'UserDetail', // ← 一致
            },
        },
    ],
}
```

---

### Q3: パラメータが置換されない

**確認項目:**
1. パラメータ名が正しいか（`:id`, `:userId` など）
2. `route.params` に値が入っているか

```javascript
// デバッグ方法
console.log('route.params:', route.params);
// 期待: { id: '123' } or { userId: '123' }
```

---

### Q4: 翻訳されない

**確認項目:**
1. i18n ファイルのキーが正しいか
2. ネストが正しいか

```javascript
// ✅ 正しい
{
    "breadcrumbs": {
        "users": {
            "list": "ユーザー"
        }
    }
}

// ❌ 間違い
{
    "breadcrumbs.users.list": "ユーザー" // フラットはダメ
}
```

---

## 📊 対応している画面遷移パターン

| パターン | 対応状況 | 例 |
|---------|---------|-----|
| 基本CRUD（一覧→詳細→編集/削除） | ✅ 完全対応 | ユーザー管理 |
| 一覧から直接編集 | ✅ 完全対応 | 設定画面 |
| 一覧→新規作成 | ✅ 完全対応 | ユーザー作成 |
| 詳細から別画面へ | ✅ 完全対応 | 権限管理、履歴 |
| タブ切り替え | ✅ 完全対応 | 詳細画面内のタブ |
| モーダル/ドロワー | ✅ 完全対応 | URL変わらない |
| 深い階層（3階層以上） | ⚠️ 要拡張 | 企業→部署→社員 |
| ウィザード形式 | ⚠️ 要拡張 | 複数ステップ |

**カバー率: 約80-90%**

---

## 🎓 実装の仕組み

### useBreadcrumbs composable

```javascript
// src/composables/useBreadcrumbs.js
export function useBreadcrumbs() {
    const route = useRoute();
    const router = useRouter();
    const { t } = useI18n();

    const breadcrumbs = computed(() => {
        const crumbs = [];
        
        // 1. route.matched から自動生成
        route.matched.forEach((record) => {
            if (record.meta.breadcrumb) {
                crumbs.push({
                    title: t(record.meta.breadcrumb),
                    to: record.path,
                    disabled: false,
                });
            }
        });

        // 2. breadcrumbParent がある場合は詳細を挿入
        if (currentMeta?.breadcrumbParent) {
            // 詳細画面を探して挿入
        }

        // 3. 最後は無効化
        crumbs[crumbs.length - 1].disabled = true;

        return crumbs;
    });

    return { breadcrumbs };
}
```

### Header コンポーネント

```vue
<script setup>
import { useBreadcrumbs } from '@/composables/useBreadcrumbs';

const { breadcrumbs: autoBreadcrumbs } = useBreadcrumbs();

const props = defineProps({
    breadcrumbs: {
        type: Array,
        default: null, // null = 自動生成
    },
});

const displayBreadcrumbs = computed(() => {
    // カスタムが渡されたらそれを使う、なければ自動生成
    return props.breadcrumbs !== null 
        ? props.breadcrumbs 
        : autoBreadcrumbs.value;
});
</script>
```

---

## 📚 参考資料

- [Vue Router 公式 - Meta Fields](https://router.vuejs.org/guide/advanced/meta.html)
- [Vue Router 公式 - Nested Routes](https://router.vuejs.org/guide/essentials/nested-routes.html)
- [Vue I18n 公式](https://vue-i18n.intlify.dev/)

---

## ✅ チェックリスト（新機能追加時）

- [ ] `routes.js` にヘルパー関数を追加
- [ ] `router/index.js` にルートを定義
- [ ] `meta.breadcrumb` に i18n キーを指定（`.list` で終わる）
- [ ] 詳細画面に `name` を定義
- [ ] 編集・削除画面に `breadcrumbParent` を追加
- [ ] i18n ファイルに翻訳を追加
- [ ] ビューファイルでヘルパー関数を使用
- [ ] 動作確認（一覧→詳細→編集の遷移）

---

## 🎉 まとめ

このテンプレートのパンくずリスト自動生成機能は:

- ✅ Vue Router 公式推奨パターンに準拠
- ✅ 実務の80-90%の画面遷移パターンをカバー
- ✅ 新機能追加が簡単（ルート定義 + i18n のみ）
- ✅ メンテナンス性が高い
- ✅ 拡張が容易

困ったときはこのドキュメントを参照してください！