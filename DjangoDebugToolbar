# Django パフォーマンス監視ツール完全ガイド

Djangoアプリケーションのパフォーマンスを監視する2つの必須ツールの使い方を、実際のプロジェクトでの測定結果を交えて解説します。

---

## 📋 目次

1. [なぜパフォーマンス監視が必要？](#なぜパフォーマンス監視が必要)
2. [2つのツールの違い](#2つのツールの違い)
3. [インストール方法](#インストール方法)
4. [django-querycount（ターミナル監視）](#django-querycount)
5. [Django Debug Toolbar（ブラウザ監視）](#django-debug-toolbar)
6. [実例で学ぶパフォーマンス分析](#実例で学ぶパフォーマンス分析)
7. [よくある問題と解決方法](#よくある問題と解決方法)

---

## なぜパフォーマンス監視が必要？

### 遅いアプリケーションの末路

```
開発初期（100件）
→ サクサク動く 😊

半年後（10,000件）
→ ちょっと遅い... 🤔

1年後（100,000件）
→ 使い物にならない 😱
```

### 典型的なパフォーマンス問題

#### ❌ N+1問題（最も多い）
```python
# 悪い例：101回クエリが実行される
users = User.objects.all()  # 1回
for user in users:
    print(user.profile.name)  # 100回！

# 良い例：2回で済む
users = User.objects.select_related('profile').all()
for user in users:
    print(user.profile.name)
```

#### ❌ インデックスなし
```python
# employee_idにインデックスがないと遅い
User.objects.filter(employee_id='12345')
# 100,000件を全件スキャン → 数秒かかる
```

#### ❌ 不要なデータ取得
```python
# 悪い例：全フィールド取得
users = User.objects.all()

# 良い例：必要なフィールドだけ
users = User.objects.only('id', 'username')
```

---

## 2つのツールの違い

### クイック比較

| 特徴 | django-querycount | Django Debug Toolbar |
|------|------------------|---------------------|
| **表示場所** | ターミナル | ブラウザ |
| **自動表示** | ✅ はい | ❌ いいえ（クリック必要） |
| **詳細度** | 簡易（サマリー） | 超詳細（SQL全文） |
| **用途** | 日常的な監視 | 詳細な分析 |
| **邪魔さ** | なし | 少しあり |

### 使い分けの鉄則

```
🔍 日常開発
→ querycount を見ながらコーディング
  「Total queries: 4 in 0.02s」 ← これ見るだけ

🐛 問題発見時
→ Debug Toolbar で詳細調査
  どのクエリが重いか特定
  N+1問題の箇所を確認

✅ 修正後
→ querycount で改善を確認
  「4 queries → 2 queries」
```

---

## インストール方法

### 1. パッケージインストール

```bash
pip install django-debug-toolbar django-querycount
```

### 2. settings.py 設定

```python
# backend/config/settings.py

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    # ... 既存のアプリ ...
    
    # 開発ツール（最後に追加）
    'debug_toolbar',
]

MIDDLEWARE = [
    'debug_toolbar.middleware.DebugToolbarMiddleware',  # 先頭付近に
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    # ... 既存のミドルウェア ...
    'querycount.middleware.QueryCountMiddleware',       # どこでもOK
]

# Debug Toolbar設定
INTERNAL_IPS = [
    '127.0.0.1',
]

# querycount設定
QUERYCOUNT = {
    'THRESHOLDS': {
        'MEDIUM': 50,                   # 50クエリで黄色警告
        'HIGH': 200,                    # 200クエリで赤色警告
        'MIN_TIME_TO_LOG': 0,
        'MIN_QUERY_COUNT_TO_LOG': 0,
    },
    'IGNORE_REQUEST_PATTERNS': [],
    'IGNORE_SQL_PATTERNS': [],
    'DISPLAY_DUPLICATES': 10,
    'RESPONSE_HEADER': 'X-DjangoQueryCount-Count',
}
```

### 3. urls.py 設定（Debug Toolbarのみ）

```python
# backend/config/urls.py

from django.urls import path, include
from django.conf import settings

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/', include('users.urls')),
    # ... 既存のURL ...
]

# Debug Toolbar用
if settings.DEBUG:
    import debug_toolbar
    urlpatterns = [
        path('__debug__/', include(debug_toolbar.urls)),
    ] + urlpatterns
```

---

## django-querycount

### 基本的な見方

#### ターミナル出力例

```bash
$ python manage.py runserver

http://localhost:8000/api/users/?page=1&page_size=10
|------|-----------|----------|----------|----------|------------|
| Type | Database  |   Reads  |  Writes  |  Totals  | Duplicates |
|------|-----------|----------|----------|----------|------------|
| RESP |  default  |    4     |    0     |    4     |     0      |
|------|-----------|----------|----------|----------|------------|
Total queries: 4 in 0.0287s 
```

### 各項目の意味

```
Type: RESP
→ レスポンス生成時のクエリ

Database: default
→ 使用しているデータベース（複数DB対応）

Reads: 4
→ SELECT文（読み取り）の回数

Writes: 0
→ INSERT/UPDATE/DELETE（書き込み）の回数

Totals: 4
→ 合計クエリ数

Duplicates: 0
→ 重複クエリの数（N+1問題の兆候）
```

### 速度の目安

```
✅ 0.01〜0.1秒
   → 瞬時。完璧。

✅ 0.1〜0.3秒
   → 高速。問題なし。

⚠️ 0.3〜1秒
   → ちょっと遅い。余裕があれば改善。

❌ 1〜3秒
   → 遅い。改善推奨。

💀 3秒以上
   → 超遅い。今すぐ改善必須。
```

### 実際の測定例（89,957件のデータ）

#### ✅ 良い例：ユーザー一覧

```bash
http://localhost:8000/api/users/?page=8993&page_size=10
Total queries: 4 in 0.0287s

実行されたクエリ:
1. セッション確認
2. ユーザー取得（認証）
3. 総件数カウント
4. 10件取得（LIMIT 10 OFFSET 89920）

評価: ⭐⭐⭐⭐⭐
→ 9万件スキップしても0.03秒！インデックスが効いてる証拠
```

#### ⚠️ 注意が必要な例：管理者数カウント

```bash
http://localhost:8000/api/users/admin-count/
Total queries: 3 in 0.2062s

実行されたクエリ:
1. セッション確認
2. ユーザー取得
3. 管理者数カウント（複雑な条件）

評価: ⭐⭐⭐⭐
→ 0.2秒は許容範囲だが、大規模データなら要改善
```

#### ✅ 良い例：検索機能

```bash
http://localhost:8000/api/users/?search=222
Total queries: 4 in 0.0706s

WHERE (employee_id LIKE '222%' OR username LIKE '222%')

評価: ⭐⭐⭐⭐⭐
→ 前方一致（^）でインデックスが効いて高速
```

### Duplicates（重複）の警告サイン

```bash
# 危険なパターン
Total queries: 245 in 1.2s
Duplicates: 200  ← これ！

→ 同じクエリが200回実行されている
→ 典型的なN+1問題
```

---

## Django Debug Toolbar

### 表示方法

#### 1. ブラウザでAPIにアクセス

```
http://localhost:8000/api/users/?page=1&page_size=10
```

#### 2. 右側のボタンをクリック

```
画面右端に「DjDT」ボタンが表示される
※表示されない場合：
  - settings.py の INTERNAL_IPS を確認
  - INTERNAL_IPS = ['127.0.0.1'] が設定されているか
```

#### 3. サイドバーが開く

```
DjDT
├─ Versions       # Djangoバージョン
├─ Time           # 実行時間
├─ SQL            # ← これを見る！
├─ Static files
├─ Templates
└─ ...
```

### SQL パネルの見方

#### 基本情報

```
SQL queries from 1 connection
4 queries in 20.87ms

Time (ms)  |  SQL
-----------|------------------------------------------
5.2        |  SELECT FROM django_session WHERE...
3.1        |  SELECT FROM users WHERE id = 1...
8.4        |  SELECT COUNT(*) FROM users...
4.1        |  SELECT FROM users ORDER BY id...
```

#### 重複クエリの確認

```
Similar queries:
┌─────────────────────────────────┐
│ SELECT FROM users WHERE id = ?  │
│ Executed 3 times                │ ← N+1問題の可能性
│                                 │
│ [1] id = 1                      │
│ [2] id = 2                      │
│ [3] id = 3                      │
└─────────────────────────────────┘
```

#### EXPLAINで確認

```
各クエリの横にある [EXPLAIN] ボタン
→ クリックするとクエリプランが見れる

例:
QUERY PLAN
----------------
Index Scan on users  ← インデックス使用 ✅
  Index: users_employee_id_idx
  Rows: 1
```

### 実際の使用例

#### シナリオ：ユーザー詳細画面が遅い

**Step 1: querycountで異常を検知**
```bash
Total queries: 8 in 0.1299s
Duplicates: 3
```

**Step 2: Debug Toolbarで詳細確認**
```
SQL タブを開く

Similar queries: 3 times
┌──────────────────────────────────┐
│ SELECT * FROM users WHERE id = ? │
│                                  │
│ [1] 0.011s - id = 60             │
│ [2] 0.009s - id = 60  ← 同じID！ │
│ [3] 0.010s - id = 60  ← 同じID！ │
└──────────────────────────────────┘

原因: pre_save シグナルで再取得している
```

**Step 3: 判断**
```
3回の内訳:
- 1回目: ViewSet.get_object()
- 2回目: Serializer内部
- 3回目: pre_save（監査ログ用）

結論: 監査ログのため必要な処理
      0.13秒なら許容範囲 ✅
```

---

## 実例で学ぶパフォーマンス分析

### 事例1：ページネーション（89,957件）

#### 測定結果

```bash
# 1ページ目
http://localhost:8000/api/users/?page=1&page_size=10
Total queries: 4 in 0.0192s

# 8993ページ目（最後の方）
http://localhost:8000/api/users/?page=8993&page_size=10
Total queries: 4 in 0.0287s
```

#### 実行されたSQL

```sql
-- 1. セッション確認（認証）
SELECT * FROM django_session WHERE session_key = ?

-- 2. ログインユーザー取得
SELECT * FROM users WHERE id = 1

-- 3. 総件数カウント
SELECT COUNT(*) FROM users WHERE deleted_at IS NULL

-- 4. ページデータ取得
SELECT * FROM users 
WHERE deleted_at IS NULL 
ORDER BY id ASC 
LIMIT 10 OFFSET 89920
```

#### 分析

```
✅ クエリ数: 4回（最小限）
✅ 速度: 0.03秒（9万件スキップしても高速）
✅ N+1問題: なし
✅ インデックス: PRIMARY KEY (id) が効いている

結論: 完璧な実装
```

### 事例2：ユーザー更新（監査ログあり）

#### 測定結果

```bash
http://localhost:8000/api/users/86/
Total queries: 8 in 0.0185s
Duplicates: 3
```

#### 実行されたSQL

```sql
-- ユーザー取得（3回重複）
SELECT * FROM users WHERE id = 86  -- ViewSet
SELECT * FROM users WHERE id = 86  -- Serializer
SELECT * FROM users WHERE id = 86  -- pre_save（監査ログ用）

-- 重複チェック
SELECT 1 FROM users 
WHERE employee_id = '31320' 
  AND id != 86

-- トランザクション
BEGIN
UPDATE users SET username = '橋本美穂a' WHERE id = 86
COMMIT
```

#### 分析

```
⚠️ 重複: 3回（監査ログのため）
✅ 速度: 0.02秒（許容範囲）
✅ トランザクション: 正しく使用

監査ログの価値:
{
  "action": "UPDATE",
  "user": "12345",
  "changes": {
    "username": {
      "old": "橋本美穂",
      "new": "橋本美穂a"
    }
  }
}

結論: 重複クエリは必要経費。速度も問題なし。
```

### 事例3：検索機能（前方一致）

#### 測定結果

```bash
http://localhost:8000/api/users/?search=222
Total queries: 4 in 0.0706s
```

#### 実行されたSQL

```sql
-- カウント
SELECT COUNT(*) FROM users 
WHERE deleted_at IS NULL 
  AND (
    employee_id LIKE '222%' 
    OR username LIKE '222%'
  )

-- データ取得
SELECT * FROM users 
WHERE deleted_at IS NULL 
  AND (
    employee_id LIKE '222%' 
    OR username LIKE '222%'
  )
ORDER BY id ASC 
LIMIT 10
```

#### 分析

```
✅ LIKE '222%': 前方一致（インデックス使用）
✅ 速度: 0.07秒
✅ 9万件でも高速

もし LIKE '%222%' だったら:
❌ 部分一致（フルスキャン）
❌ 速度: 2〜5秒
❌ 使い物にならない

結論: 前方一致（^）の選択が正解
```

---

## よくある問題と解決方法

### 問題1：N+1問題

#### 症状
```bash
Total queries: 245 in 1.2s
Duplicates: 200
```

#### 原因
```python
# 悪い例
users = User.objects.all()
for user in users:
    print(user.profile.name)  # 毎回クエリ
```

#### 解決
```python
# select_related（1対1, ForeignKey）
users = User.objects.select_related('profile').all()

# prefetch_related（多対多, 逆参照）
users = User.objects.prefetch_related('groups').all()
```

### 問題2：遅い検索

#### 症状
```bash
http://localhost:8000/api/users/?search=test
Total queries: 4 in 3.5s  ← 遅い！
```

#### 原因
```python
# settings.py
search_fields = ['employee_id', 'username']  # 部分一致

# 実行されるSQL
WHERE employee_id LIKE '%test%'  ← フルスキャン
```

#### 解決
```python
# 前方一致に変更
search_fields = ['^employee_id', '^username']

# 実行されるSQL
WHERE employee_id LIKE 'test%'  ← インデックス使用
```

### 問題3：インデックスがない

#### 症状
```bash
# 特定フィールドの検索が遅い
User.objects.filter(employee_id='12345')
→ 0.5秒
```

#### 確認
```python
# Debug Toolbar の EXPLAIN を見る
QUERY PLAN
----------------
Seq Scan on users  ← Sequential Scan = フルスキャン（遅い）
```

#### 解決
```python
# models.py
class User(models.Model):
    employee_id = models.CharField(max_length=50)
    
    class Meta:
        indexes = [
            models.Index(fields=['employee_id']),  # インデックス追加
        ]
```

```bash
python manage.py makemigrations
python manage.py migrate
```

### 問題4：不要なフィールド取得

#### 症状
```python
# 一覧で全フィールド取得
users = User.objects.all()
# SELECT * FROM users  ← 重い
```

#### 解決
```python
# 必要なフィールドだけ
users = User.objects.only('id', 'username', 'employee_id')
# SELECT id, username, employee_id FROM users

# または
users = User.objects.defer('password', 'last_login')
# password, last_login 以外を取得
```

---

## まとめ

### 開発フロー

```
1. コードを書く
   ↓
2. querycount で確認
   Total queries: 4 in 0.02s ← OK
   ↓
3. 異常があれば Debug Toolbar で分析
   ↓
4. 修正
   ↓
5. querycount で改善を確認
```

### パフォーマンスの鉄則

```
✅ クエリ数は少なく（N+1問題を避ける）
✅ インデックスを活用
✅ 前方一致検索を優先
✅ 必要なデータだけ取得
✅ 監視ツールで常にチェック
```

### 速度の基準

| 速度 | 評価 | 対応 |
|------|------|------|
| 0〜0.1秒 | ⭐⭐⭐⭐⭐ | 完璧 |
| 0.1〜0.3秒 | ⭐⭐⭐⭐ | 良好 |
| 0.3〜1秒 | ⭐⭐⭐ | 改善推奨 |
| 1〜3秒 | ⭐⭐ | 要改善 |
| 3秒以上 | ⭐ | 今すぐ改善 |

---

## 参考リンク

- [Django Debug Toolbar 公式](https://django-debug-toolbar.readthedocs.io/)
- [django-querycount GitHub](https://github.com/bradmontgomery/django-querycount)
- [Django Database Optimization](https://docs.djangoproject.com/en/4.2/topics/db/optimization/)

---

**作成日**: 2025-11-01  
**対象**: Django 4.2+, Python 3.11+