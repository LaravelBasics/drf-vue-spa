(venv) PS C:\Users\pvufx\Desktop\template\backend> python -c "import rest_framework; print(rest_framework.__path__)"

['C:\\Users\\pvufx\\Desktop\\template\\venv\\Lib\\site-packages\\rest_framework']

site-packages/
└── rest_framework/
    └── locale/
        ├── ja/
        │   └── LC_MESSAGES/
        │       ├── django.mo  ← ここ
        │       └── django.mo

# rest_framework/locale/ja/LC_MESSAGES/django.po

msgid "Authentication credentials were not provided."
msgstr "認証情報が含まれていません。"

# Django REST Framework 超初心者ガイド

## 🎯 このドキュメントの目的

「Django REST Framework（DRF）って何？」という人向けに、**リクエストがどう処理されるか** を図解で説明します。

---

## 📖 まず基礎知識

### **APIって何？**

```
┌─────────┐                  ┌─────────┐
│         │   データちょうだい  │         │
│ フロント │ ────────────────► │ API     │
│         │                  │(バック)  │
│         │ ◄──────────────── │         │
│         │   はい、どうぞ     │         │
└─────────┘                  └─────────┘

例:
フロント「ユーザー一覧ください」
API「はい、[{id:1, name:"太郎"}, {id:2, name:"花子"}]」
```

### **RESTful APIとは？**

URLとHTTPメソッドで操作を表現する方式。

| 操作 | HTTPメソッド | URL | 意味 |
|------|-------------|-----|------|
| 一覧取得 | `GET` | `/api/users/` | ユーザー全部教えて |
| 詳細取得 | `GET` | `/api/users/1/` | ID=1 のユーザー教えて |
| 作成 | `POST` | `/api/users/` | 新しいユーザー作って |
| 更新 | `PUT` | `/api/users/1/` | ID=1 を更新して |
| 削除 | `DELETE` | `/api/users/1/` | ID=1 を削除して |

---

## 🚀 リクエストの流れ（超ざっくり版）

```
1. フロントからリクエスト
   ↓
2. Django が受け取る
   ↓
3. URL を見て「どの処理か」判断
   ↓
4. View（処理の本体）が実行される
   ↓
5. データベースから取得
   ↓
6. JSON に変換
   ↓
7. フロントに返す
```

---

## 📊 具体例: ユーザー一覧取得

### **リクエスト**
```
GET /api/users/
```

### **処理の流れ（超詳細版）**

```
┌─────────────────────────────────────────────────┐
│ 1. リクエスト受付                                │
│    GET /api/users/                              │
│    Cookie: sessionid=abc123                     │
└─────────────────────────────────────────────────┘
                    ↓
┌─────────────────────────────────────────────────┐
│ 2. Middleware（通過チェックポイント）            │
│    ✅ SessionMiddleware                         │
│       → Cookie から user_id 取得                │
│    ✅ AuthenticationMiddleware                  │
│       → request.user にユーザー情報セット        │
│    ✅ LanguageMiddleware                        │
│       → Accept-Language: ja → 日本語モード      │
└─────────────────────────────────────────────────┘
                    ↓
┌─────────────────────────────────────────────────┐
│ 3. URL Routing                                  │
│    urls.py を見て「どの View か」判定            │
│                                                 │
│    /api/users/ → UserViewSet.list()            │
└─────────────────────────────────────────────────┘
                    ↓
┌─────────────────────────────────────────────────┐
│ 4. Permission Check（権限チェック）              │
│    UserViewSet の permission_classes をチェック  │
│                                                 │
│    [IsAuthenticated, IsAdminUser]              │
│     ↓                    ↓                      │
│   ログイン済み？      管理者？                   │
│     Yes                 Yes                     │
│          → OK、次へ進む                         │
└─────────────────────────────────────────────────┘
                    ↓
┌─────────────────────────────────────────────────┐
│ 5. View（処理の本体）                            │
│    UserViewSet.list() が実行される               │
│                                                 │
│    def list(self, request):                    │
│        queryset = self.get_queryset()          │
│        # ↓ データベースにアクセス                │
│        users = User.objects.all()              │
│        # → [User(id=1), User(id=2), ...]       │
└─────────────────────────────────────────────────┘
                    ↓
┌─────────────────────────────────────────────────┐
│ 6. Serializer（JSON変換係）                      │
│    UserSerializer が Python オブジェクトを       │
│    JSON に変換                                   │
│                                                 │
│    User(id=1, name="太郎")                      │
│      ↓                                          │
│    {"id": 1, "name": "太郎"}                    │
└─────────────────────────────────────────────────┘
                    ↓
┌─────────────────────────────────────────────────┐
│ 7. Pagination（ページ分割）                      │
│    10件ずつに分割                                │
│                                                 │
│    100人 → 1ページ目: 1-10人                    │
│            2ページ目: 11-20人                   │
└─────────────────────────────────────────────────┘
                    ↓
┌─────────────────────────────────────────────────┐
│ 8. Response（レスポンス返却）                    │
│    JSON形式で返す                                │
│                                                 │
│    {                                            │
│      "count": 100,                             │
│      "results": [                              │
│        {"id": 1, "name": "太郎"},              │
│        {"id": 2, "name": "花子"}               │
│      ]                                         │
│    }                                           │
└─────────────────────────────────────────────────┘
```

---

## 🗂️ 各ファイルの役割（超分かりやすく）

### **全体像**

```
リクエスト
  ↓
urls.py ────► どの処理か判定
  ↓
views.py ───► 処理の本体
  ↓
permissions.py ─► 権限チェック
  ↓
serializers.py ─► データ検証・JSON変換
  ↓
services/ ──► ビジネスロジック
  ↓
models.py ──► データベース操作
  ↓
レスポンス
```

---

## 📝 各ファイルの詳細説明

### **1. urls.py - 「交通整理係」**

**役割:** URLを見て「どの処理を呼ぶか」決める

```python
# config/urls.py
urlpatterns = [
    path("api/users/", include("users.urls")),
    path("api/auth/", include("accounts.urls")),
]

# users/urls.py
router = DefaultRouter()
router.register(r"", UserViewSet)

# これで自動生成されるURL:
# GET    /api/users/          → UserViewSet.list()
# POST   /api/users/          → UserViewSet.create()
# GET    /api/users/1/        → UserViewSet.retrieve()
# PUT    /api/users/1/        → UserViewSet.update()
# DELETE /api/users/1/        → UserViewSet.destroy()
```

**例え話:**
```
あなた「東京駅に行きたい」
案内係「山手線の3番線ですよ」
       ↑ これが urls.py
```

---

### **2. views.py - 「処理の本体」**

**役割:** 実際の処理を実行する

```python
class UserViewSet(viewsets.ModelViewSet):
    """ユーザー管理API"""
    
    queryset = User.objects.all()
    serializer_class = UserSerializer
    permission_classes = [IsAuthenticated, IsAdminUser]
    
    def list(self, request):
        """一覧取得"""
        # 1. データベースから取得
        users = User.objects.all()
        
        # 2. JSON に変換
        serializer = UserSerializer(users, many=True)
        
        # 3. 返す
        return Response(serializer.data)
```

**ViewSet が自動でやってくれること:**
- `list()` - 一覧取得
- `create()` - 作成
- `retrieve()` - 詳細取得
- `update()` - 更新
- `destroy()` - 削除

**例え話:**
```
お客さん「ラーメンください」
店員「はい、作ります」（← View）
  ↓
調理（データベースアクセス）
  ↓
「できました！」（レスポンス）
```

---

### **3. serializers.py - 「通訳係」**

**役割:** 
1. 入力データの検証（バリデーション）
2. Python オブジェクト ⇔ JSON の変換

```python
class UserSerializer(serializers.ModelSerializer):
    """ユーザー情報のシリアライザー"""
    
    class Meta:
        model = User
        fields = ["id", "employee_id", "username", "email"]
```

**変換の例:**

```python
# Python → JSON（シリアライズ）
user = User(id=1, name="太郎")
serializer = UserSerializer(user)
print(serializer.data)
# → {"id": 1, "name": "太郎"}

# JSON → Python（デシリアライズ）
data = {"name": "花子", "email": "hanako@example.com"}
serializer = UserSerializer(data=data)
if serializer.is_valid():  # バリデーション
    user = serializer.save()  # データベースに保存
```

**バリデーションの例:**

```python
class UserCreateSerializer(serializers.ModelSerializer):
    employee_id = serializers.CharField(
        required=True,  # 必須
        max_length=50,  # 50文字以内
    )
    
    password = serializers.CharField(
        min_length=8,  # 8文字以上
    )

# 使い方
data = {"employee_id": "", "password": "123"}  # エラーになるデータ
serializer = UserCreateSerializer(data=data)

if not serializer.is_valid():
    print(serializer.errors)
    # {
    #   "employee_id": ["必須です"],
    #   "password": ["8文字以上で入力してください"]
    # }
```

**例え話:**
```
外国人「I want ramen」
通訳「ラーメンが欲しいそうです」（← Serializer）
店員「了解！」
```

---

### **4. permissions.py - 「門番」**

**役割:** 「この人、この操作していいの？」をチェック

```python
class IsAdminUser(permissions.BasePermission):
    """管理者のみアクセス許可"""
    
    def has_permission(self, request, view):
        # ログインしてる？
        if not request.user.is_authenticated:
            return False  # ダメ
        
        # 管理者？
        return request.user.is_admin
```

**使い方:**

```python
class UserViewSet(viewsets.ModelViewSet):
    permission_classes = [IsAuthenticated, IsAdminUser]
    #                     ↑ ログイン必須  ↑ 管理者のみ
```

**チェックの流れ:**

```
リクエスト
  ↓
IsAuthenticated.has_permission()
  ↓ ログインしてる？
  Yes → 次へ
  No  → 401 Unauthorized
  ↓
IsAdminUser.has_permission()
  ↓ 管理者？
  Yes → OK、処理実行
  No  → 403 Forbidden
```

**例え話:**
```
門番「チケット持ってる？」（← IsAuthenticated）
あなた「はい」
門番「VIPチケット？」（← IsAdminUser）
あなた「はい」
門番「どうぞ」
```

---

### **5. services/ - 「ビジネスロジック係」**

**役割:** 複雑な処理をまとめる

```python
class UserService:
    """ユーザー管理のビジネスロジック"""
    
    @staticmethod
    def create_user(validated_data):
        """ユーザー作成"""
        # 1. パスワードを取り出す
        password = validated_data.pop("password")
        
        # 2. ユーザー作成
        user = User.objects.create_user(
            password=password,
            **validated_data
        )
        
        # 3. 返す
        return user
```

**なぜ分けるの？**

```python
# ❌ 悪い例: View に全部書く
class UserViewSet(viewsets.ModelViewSet):
    def create(self, request):
        # バリデーション
        # データベース操作
        # メール送信
        # ログ記録
        # 100行のコード...
        pass

# ✅ 良い例: Service に分ける
class UserViewSet(viewsets.ModelViewSet):
    def create(self, request):
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        
        # Service に任せる
        user = UserService.create_user(serializer.validated_data)
        
        return Response(UserSerializer(user).data)
```

**メリット:**
- View がシンプル
- テストしやすい
- 再利用できる

**例え話:**
```
あなた「結婚式の準備して」
プランナー「任せてください」（← Service）
  ↓
会場手配、料理、招待状、写真...
  ↓
あなた「ありがとう！」
```

---

### **6. models.py - 「データベース設計図」**

**役割:** データの構造を定義

```python
class User(AbstractBaseUser):
    """ユーザーモデル"""
    
    employee_id = models.CharField(max_length=50)
    username = models.CharField(max_length=50)
    email = models.EmailField()
    deleted_at = models.DateTimeField(null=True)
    
    def soft_delete(self):
        """論理削除"""
        self.deleted_at = timezone.now()
        self.save()
```

**データベースのイメージ:**

```
┌─────────────────────────────────────────┐
│             users テーブル               │
├────┬──────────┬─────────┬───────────────┤
│ id │employee_id│ username│  deleted_at  │
├────┼──────────┼─────────┼───────────────┤
│ 1  │ EMP001   │ 太郎    │ NULL         │
│ 2  │ EMP002   │ 花子    │ 2025-01-20   │← 削除済み
│ 3  │ EMP003   │ 次郎    │ NULL         │
└────┴──────────┴─────────┴───────────────┘
```

**使い方:**

```python
# 作成
user = User.objects.create(
    employee_id="EMP001",
    username="太郎"
)

# 取得
user = User.objects.get(id=1)
users = User.objects.all()

# 更新
user.username = "太郎2"
user.save()

# 削除
user.soft_delete()  # 論理削除
user.delete()       # 物理削除
```

---

### **7. exceptions.py - 「エラーメッセージ係」**

**役割:** エラーを分かりやすく伝える

```python
class LastAdminError(Exception):
    """最後の管理者エラー"""
    
    def __init__(self):
        self.error_code = "LAST_ADMIN"
        self.detail = "最後の管理者は削除できません"
        self.status_code = 400
```

**使い方:**

```python
def delete_user(user):
    # 最後の管理者？
    if is_last_admin(user):
        raise LastAdminError()  # エラーを投げる
    
    user.soft_delete()
```

**エラーが返る:**

```json
{
  "error_code": "LAST_ADMIN",
  "detail": "最後の管理者は削除できません"
}
```

---

## 🎬 実際の処理例: ユーザー作成

### **リクエスト**

```http
POST /api/users/
Content-Type: application/json

{
  "employee_id": "EMP999",
  "username": "新人",
  "password": "test1234",
  "email": "shingin@example.com",
  "is_admin": false
}
```

### **処理の流れ（超詳細）**

```
┌─────────────────────────────────────────┐
│ 1. urls.py                              │
│    POST /api/users/                     │
│    → UserViewSet.create() に振り分け    │
└─────────────────────────────────────────┘
              ↓
┌─────────────────────────────────────────┐
│ 2. views.py - UserViewSet.create()     │
│                                         │
│    def create(self, request):          │
│        # シリアライザーを取得           │
│        serializer = self.get_serializer(│
│            data=request.data            │
│        )                                │
└─────────────────────────────────────────┘
              ↓
┌─────────────────────────────────────────┐
│ 3. serializers.py - バリデーション      │
│                                         │
│    serializer.is_valid()                │
│                                         │
│    ✅ employee_id: 必須？ → Yes         │
│    ✅ password: 8文字以上？ → Yes       │
│    ✅ email: 形式OK？ → Yes             │
│                                         │
│    → OK、次へ                           │
└─────────────────────────────────────────┘
              ↓
┌─────────────────────────────────────────┐
│ 4. services/user_service.py            │
│                                         │
│    UserService.create_user(             │
│        validated_data                   │
│    )                                    │
│                                         │
│    # パスワードをハッシュ化             │
│    password = "test1234"                │
│      ↓                                  │
│    hashed = "pbkdf2_sha256$..."         │
└─────────────────────────────────────────┘
              ↓
┌─────────────────────────────────────────┐
│ 5. models.py - データベース保存         │
│                                         │
│    user = User.objects.create_user(     │
│        employee_id="EMP999",            │
│        username="新人",                  │
│        password=hashed,                 │
│        ...                              │
│    )                                    │
│                                         │
│    → データベースに INSERT              │
└─────────────────────────────────────────┘
              ↓
┌─────────────────────────────────────────┐
│ 6. serializers.py - JSON変換            │
│                                         │
│    UserSerializer(user).data            │
│                                         │
│    User(id=100, name="新人")            │
│      ↓                                  │
│    {"id": 100, "username": "新人"}      │
└─────────────────────────────────────────┘
              ↓
┌─────────────────────────────────────────┐
│ 7. views.py - レスポンス返却            │
│                                         │
│    return Response(                     │
│        serializer.data,                 │
│        status=201                       │
│    )                                    │
└─────────────────────────────────────────┘
              ↓
┌─────────────────────────────────────────┐
│ 8. フロントに返す                        │
│                                         │
│    HTTP/1.1 201 Created                 │
│    {                                    │
│      "id": 100,                         │
│      "employee_id": "EMP999",           │
│      "username": "新人",                │
│      "email": "shingin@example.com",    │
│      "is_admin": false                  │
│    }                                    │
└─────────────────────────────────────────┘
```

---

## 🔄 まとめ: 各ファイルの役割一覧

| ファイル | 役割 | 例え |
|---------|------|------|
| **urls.py** | URL と View の紐付け | 案内係 |
| **views.py** | 処理の実行 | 店員 |
| **serializers.py** | データ検証・JSON変換 | 通訳 |
| **permissions.py** | 権限チェック | 門番 |
| **services/** | ビジネスロジック | プランナー |
| **models.py** | データ構造 | 設計図 |
| **exceptions.py** | エラー定義 | エラーメッセージ係 |

---

## 💡 初心者が最初にやること

### **1. まずは動かしてみる**

```bash
python manage.py runserver
```

ブラウザで `http://localhost:8000/api/users/` を開く

### **2. 簡単なAPIを作ってみる**

```python
# 1. models.py にモデル追加
class Book(models.Model):
    title = models.CharField(max_length=100)
    author = models.CharField(max_length=50)

# 2. serializers.py にシリアライザー追加
class BookSerializer(serializers.ModelSerializer):
    class Meta:
        model = Book
        fields = "__all__"

# 3. views.py にビューセット追加
class BookViewSet(viewsets.ModelViewSet):
    queryset = Book.objects.all()
    serializer_class = BookSerializer

# 4. urls.py に登録
router.register(r"books", BookViewSet)

# 5. マイグレーション
python manage.py makemigrations
python manage.py migrate

# 6. 動作確認
# GET  /api/books/      → 一覧
# POST /api/books/      → 作成
```

### **3. コードを読む順番**

```
1. models.py     ← データ構造を理解
   ↓
2. serializers.py ← 入出力の形式を理解
   ↓
3. views.py      ← 処理の流れを理解
   ↓
4. services/     ← ビジネスロジックを理解
   ↓
5. permissions.py ← 権限の仕組みを理解
```

---

## 🎓 次のステップ

1. ✅ このガイドを読む
2. ✅ 実際にコードを動かす
3. ✅ 小さな機能を追加してみる
4. ✅ テストを書いてみる
5. ✅ 公式ドキュメントを読む

---

このガイドで DRF の基礎が理解できたはずです！  
分からないことがあれば、いつでもAIに質問してください ( ́・ω・`)b




====================================================================================


# ユーザー管理システム

Django REST Framework + Vue.js 3 + Vuetify 3 で構築された、論理削除対応のユーザー管理システムです。

## 🎯 主な機能

- ✅ **社員番号ログイン認証**（パスワード認証）
- ✅ **論理削除対応**（削除済み社員番号の再利用可能）
- ✅ **ブルートフォース攻撃対策**（10回失敗でロック）
- ✅ **多言語対応**（日本語・英語）
- ✅ **管理者権限管理**（最低1人の管理者を保証）
- ✅ **CRUD操作 + 一括操作**（削除・復元）

---

## 📦 技術スタック

### **バックエンド**
- Python
- Django
- Django REST Framework
- SQLite（開発環境）

### **フロントエンド**
- Vue.js 3
- Vuetify
- Pinia（状態管理）
- Vue Router
- Axios

---

## 🚀 セットアップ

### **1. 前提条件**

```bash
# 必要なツール
Python 
Node.js 18
npm または yarn
```

### **2. バックエンドのセットアップ**

# 仮想環境を作成
python -m venv venv

# 仮想環境を有効化
# Windows
venv\Scripts\activate

# macOS/Linux
source venv/bin/activate

# 依存関係をインストール
pip install -r requirements.txt

# 翻訳ファイルをコンパイル
python compile_translations.py

# データベースをマイグレート
python manage.py migrate

# （オプション）ダミーデータを作成
python manage.py create_dummy_users --count=50

# サーバー起動
python manage.py runserver
```

**デフォルト管理者アカウント:**
- 社員番号: `9999`
- パスワード: `test1234`

### **3. フロントエンドのセットアップ**

```bash
cd frontend

# 依存関係をインストール
npm install

# 開発サーバー起動
npm run dev
```

**アクセス URL:**
- フロントエンド: `http://localhost:5173`
- バックエンド API: `http://localhost:8000`
- Django Admin: `http://localhost:8000/admin`

---

## 📁 プロジェクト構成

```
project/
├── backend/                 # Django バックエンド
│   ├── accounts/           # 認証関連
│   │   ├── backends.py     # 社員番号認証バックエンド
│   │   ├── serializers.py  # ログインシリアライザー
│   │   └── views.py        # ログイン/ログアウト API
│   ├── users/              # ユーザー管理
│   │   ├── models.py       # ユーザーモデル（論理削除対応）
│   │   ├── serializers.py  # CRUD シリアライザー
│   │   ├── views.py        # CRUD API
│   │   ├── services/       # ビジネスロジック
│   │   │   └── user_service.py
│   │   ├── exceptions.py   # カスタム例外
│   │   └── permissions.py  # 権限クラス
│   ├── common/             # 共通処理
│   │   ├── middleware.py   # 言語切り替え
│   │   └── mixins.py       # エラーレスポンス統一
│   ├── config/             # Django設定
│   │   └── settings.py
│   └── locale/             # 翻訳ファイル
│       ├── ja/
│       └── en/
│
└── frontend/               # Vue.js フロントエンド
    ├── src/
    │   ├── components/     # 再利用可能コンポーネント
    │   ├── views/          # ページコンポーネント
    │   ├── stores/         # Pinia ストア
    │   ├── composables/    # 共通ロジック
    │   ├── router/         # ルーティング
    │   └── locales/        # 翻訳ファイル
    └── package.json
```

---

## 🔐 セキュリティ機能

### **1. ブルートフォース攻撃対策**
- ログイン失敗10回でアカウントロック（60秒）
- キャッシュベースの試行回数管理

### **2. 認証エラーの曖昧化**
```python
# 削除済みユーザー → "社員番号またはパスワードが正しくありません"
# 無効化ユーザー   → "社員番号またはパスワードが正しくありません"
# 存在しないユーザー → "社員番号またはパスワードが正しくありません"
```
→ アカウントの存在を推測できない（OWASP推奨）

### **3. タイミング攻撃対策**
```python
if not user:
    User().set_password(password)  # ダミー処理で時間を統一
    return None
```

### **4. 最後の管理者保護**
- 管理者を0人にする操作を自動ブロック
- 削除・無効化・権限剥奪を防止

---

## 🌍 多言語対応

### **サポート言語**
- 🇯🇵 日本語（デフォルト）
- 🇬🇧 英語

### **翻訳の仕組み**

**バックエンド:**
```python
from django.utils.translation import gettext_lazy as _

error_message = _("社員番号は必須です")
# 日本語: "社員番号は必須です"
# 英語: "Employee ID is required"
```

**フロントエンド:**
```javascript
import { useI18n } from 'vue-i18n'
const { t } = useI18n()

const message = t('auth.loginSuccess')
// 日本語: "ログインしました"
// 英語: "Login successful"
```

### **翻訳ファイルの編集**

```bash
# バックエンド
backend/locale/ja/LC_MESSAGES/django.po  # 日本語
backend/locale/en/LC_MESSAGES/django.po  # 英語

# コンパイル
python compile_translations.py

# フロントエンド
frontend/src/locales/ja.json  # 日本語
frontend/src/locales/en.json  # 英語
```

---

## 🗑️ 論理削除の仕組み

### **通常の削除との違い**

| 項目      | 物理削除       | 論理削除 |
|----------|----------------|--------------------------|
| データ    | DBから完全削除  | `deleted_at` に日時を記録 |
| 復元      | ❌ 不可能     | ✅ 可能                  |
| 社員番号  | ❌ 再利用不可  | ✅ 再利用可能            |
| 監査証跡  | ❌ 残らない    | ✅ 削除日時が残る        |

### **実装の特徴**

```python
# モデル定義
class User(AbstractBaseUser):
    deleted_at = models.DateTimeField(null=True, blank=True)
    
    # 条件付きユニーク制約
    class Meta:
        constraints = [
            models.UniqueConstraint(
                fields=["employee_id"],
                condition=models.Q(deleted_at__isnull=True),
                name="unique_active_employee_id",
            )
        ]

# カスタムマネージャー（削除済みを自動除外）
class CustomUserManager(BaseUserManager):
    def get_queryset(self):
        return super().get_queryset().filter(deleted_at__isnull=True)

# 使い方
User.objects.all()          # 削除済み除外
User.all_objects.all()      # 削除済み含む
```

### **社員番号の再利用例**

```python
# 1. ユーザー作成
user = User.objects.create(employee_id="EMP001", username="太郎")

# 2. 論理削除
user.soft_delete()  # deleted_at に現在日時、is_active=False

# 3. 同じ社員番号で新規作成（可能！）
new_user = User.objects.create(employee_id="EMP001", username="次郎")
# → 条件付きユニーク制約により、deleted_at が NULL のレコードのみチェック

# 4. 復元
user.restore()  # deleted_at=None、is_active=True
```

---

## 🧪 テスト

### **バックエンドテスト**

```bash
cd backend

# 全テスト実行
python manage.py test

# 特定のアプリのみ
python manage.py test users

# カバレッジ確認
coverage run --source='.' manage.py test
coverage report
```

### **フロントエンドテスト**

```bash
cd frontend

# ユニットテスト
npm run test:unit

# E2Eテスト
npm run test:e2e
```

---

## 🛠️ 開発コマンド

### **便利なコマンド**

```bash
# ダミーユーザー作成
python manage.py create_dummy_users --count=100 --password=test1234

# 削除後90日経過したユーザーを物理削除
python manage.py cleanup_deleted_users --days=90

# Dry run（削除対象を確認のみ）
python manage.py cleanup_deleted_users --days=90 --dry-run

# データベースリセット
python manage.py flush

# スーパーユーザー作成
python manage.py createsuperuser
```

---

## 📖 詳細ドキュメント

- [システム設計書](./ARCHITECTURE.md) - アーキテクチャの詳細
- [開発ガイド](./DEVELOPMENT_GUIDE.md) - 実装ガイド
- [API仕様書](./API_DOCUMENTATION.md) - エンドポイント一覧

---

## 🐛 トラブルシューティング

### **ログインできない**

```bash
# 1. 管理者アカウントが存在するか確認
python manage.py shell
>>> from django.contrib.auth import get_user_model
>>> User = get_user_model()
>>> User.objects.filter(is_admin=True, is_active=True).exists()

# 2. アカウントがロックされていないか確認（キャッシュクリア）
python manage.py shell
>>> from django.core.cache import cache
>>> cache.clear()

# 3. パスワードをリセット
python manage.py changepassword 9999
```

### **翻訳が反映されない**

```bash
# 翻訳ファイルを再コンパイル
python compile_translations.py

# サーバー再起動
python manage.py runserver
```

### **CORS エラー**

```python
# settings.py を確認
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",  # フロントエンドのURL
]
```

---

=======================================================================================

# システム設計書

## 📐 アーキテクチャ概要

本システムは、Django REST Framework（バックエンド）と Vue.js（フロントエンド）による **SPA（Single Page Application）** 構成です。

```
┌─────────────────┐         ┌─────────────────┐
│                 │         │                 │
│   Vue.js 3      │ ◄─────► │  Django REST    │
│   (Frontend)    │  HTTP   │   Framework     │
│                 │  JSON   │   (Backend)     │
│   Port: 5173    │         │   Port: 8000    │
│                 │         │                 │
└─────────────────┘         └─────────────────┘
        │                           │
        │                           │
        ▼                           ▼
  Vuetify UI               SQLite Database
  Pinia Store              (開発環境)
```

---

## 🏗️ レイヤー構造

### **バックエンド（Django）**

```
┌──────────────────────────────────────────┐
│           Presentation Layer             │
│  (views.py - ViewSet, APIView)          │
│  - リクエスト受付                         │
│  - レスポンス返却                         │
│  - 権限チェック                           │
└──────────────────────────────────────────┘
                  ↓
┌──────────────────────────────────────────┐
│          Application Layer               │
│  (services/user_service.py)             │
│  - ビジネスロジック                       │
│  - トランザクション管理                   │
│  - 例外処理                               │
└──────────────────────────────────────────┘
                  ↓
┌──────────────────────────────────────────┐
│            Domain Layer                  │
│  (models.py - User)                     │
│  - ドメインモデル                         │
│  - ビジネスルール                         │
└──────────────────────────────────────────┘
                  ↓
┌──────────────────────────────────────────┐
│         Infrastructure Layer             │
│  (Database, Cache, External APIs)       │
│  - データ永続化                           │
│  - キャッシュ管理                         │
└──────────────────────────────────────────┘
```

### **責務分離の例**

| レイヤー | 責務 | 例 |
|---------|------|-----|
| **View** | HTTP処理 | `UserViewSet.create()` |
| **Service** | ビジネスロジック | `UserService.create_user()` |
| **Model** | データ構造 | `User.soft_delete()` |
| **Serializer** | バリデーション | `UserCreateSerializer.is_valid()` |

---

## 🔐 認証・認可フロー

### **1. ログインフロー**

```
┌─────────┐                              ┌─────────┐
│         │  1. POST /api/auth/login     │         │
│ Client  │ ─────────────────────────►   │ Backend │
│         │  { employee_id, password }   │         │
└─────────┘                              └─────────┘
                                              │
                                              │ 2. Validation
                                              ▼
                                    ┌──────────────────┐
                                    │ LoginSerializer  │
                                    │ - 必須チェック    │
                                    │ - 形式チェック    │
                                    └──────────────────┘
                                              │
                                              │ 3. Authentication
                                              ▼
                                    ┌──────────────────┐
                                    │EmployeeIdBackend │
                                    │ - ユーザー検索    │
                                    │ - パスワード検証  │
                                    │ - タイミング攻撃対策│
                                    └──────────────────┘
                                              │
                                              │ 4. Session Create
                                              ▼
                                    ┌──────────────────┐
                                    │ Django Session   │
                                    │ - sessionid 発行 │
                                    │ - Cookie 送信     │
                                    └──────────────────┘
                                              │
                                              │ 5. Response
┌─────────┐                              ┌─────────┐
│         │  ◄─────────────────────────  │         │
│ Client  │  { user: {...} }             │ Backend │
│         │  Set-Cookie: sessionid       │         │
└─────────┘                              └─────────┘
```

### **2. 認証が必要なAPIアクセス**

```python
# リクエストヘッダー
Cookie: sessionid=abc123xyz...

# Django の処理
1. SessionMiddleware が Cookie から sessionid を取得
2. Session データベースから user_id を取得
3. AuthenticationMiddleware が User オブジェクトを request.user に設定
4. IsAuthenticated 権限チェック
5. IsAdminUser 権限チェック（管理者のみのAPI）
```

---

## 🗑️ 論理削除アーキテクチャ

### **設計原則**

1. **データは削除しない** - `deleted_at` フィールドで管理
2. **社員番号の再利用を可能に** - 条件付きユニーク制約
3. **削除済みは自動除外** - カスタムマネージャー
4. **復元可能** - `restore()` メソッド

### **実装の詳細**

```python
# 1. モデル定義
class User(AbstractBaseUser):
    employee_id = models.CharField(max_length=50, unique=False)
    deleted_at = models.DateTimeField(null=True, blank=True)
    
    class Meta:
        # 条件付きユニーク制約
        constraints = [
            models.UniqueConstraint(
                fields=["employee_id"],
                condition=models.Q(deleted_at__isnull=True),
                name="unique_active_employee_id",
            )
        ]
```

**条件付きユニーク制約の動作:**
```sql
-- SQLite の場合
CREATE UNIQUE INDEX unique_active_employee_id 
ON users (employee_id) 
WHERE deleted_at IS NULL;

-- 削除済み（deleted_at に値あり）は制約対象外
-- → 同じ employee_id で新規作成可能
```

### **カスタムマネージャー**

```python
# 2つのマネージャーを提供
class CustomUserManager(BaseUserManager):
    def get_queryset(self):
        # 削除済みを自動除外
        return super().get_queryset().filter(deleted_at__isnull=True)

class AllObjectsManager(BaseUserManager):
    def get_queryset(self):
        # 削除済みも含む
        return super().get_queryset()

# 使い分け
User.objects.all()          # アクティブなユーザーのみ
User.all_objects.all()      # 削除済み含む全ユーザー
```

### **論理削除のライフサイクル**

```
┌────────────┐
│  作成      │  User.objects.create(employee_id="EMP001")
│ deleted_at │  → deleted_at = NULL
│ = NULL     │
└────────────┘
      │
      │ soft_delete()
      ▼
┌────────────┐
│  削除済み  │  user.soft_delete()
│ deleted_at │  → deleted_at = 2025-01-20 10:00:00
│ = 値あり   │  → is_active = False
└────────────┘
      │
      │ restore()
      ▼
┌────────────┐
│  復元      │  user.restore()
│ deleted_at │  → deleted_at = NULL
│ = NULL     │  → is_active = True
└────────────┘
```

---

## 🛡️ セキュリティ設計

### **1. ブルートフォース攻撃対策**

```python
# キャッシュベースの試行回数管理
class LoginAPIView(APIView):
    # 設定
    MAX_LOGIN_ATTEMPTS = 10      # 最大試行回数
    LOCKOUT_DURATION = 60        # ロック時間（秒）
    
    # キャッシュキー設計
    login_attempts:EMP001  → 失敗回数（整数）
    login_locked:EMP001    → ロック状態（True/False）
```

**フロー:**
```
1. ログイン試行
   ↓
2. キャッシュから失敗回数を取得
   ↓
3. ロック中？
   Yes → 429 Too Many Requests
   No  → 認証処理へ
   ↓
4. 認証失敗
   ↓
5. 失敗回数 +1
   ↓
6. 10回到達？
   Yes → アカウントロック（60秒）
   No  → 401 Unauthorized
   ↓
7. 60秒後に自動解除（キャッシュ有効期限）
```

### **2. 認証エラーの曖昧化（OWASP推奨）**

| 状況 | 返すメッセージ |
|------|--------------|
| ユーザー不在 | ❌ "このユーザーは存在しません" |
| パスワード間違い | ❌ "パスワードが間違っています" |
| 削除済みユーザー | ❌ "このアカウントは削除されています" |
| 無効化ユーザー | ❌ "このアカウントは無効化されています" |

**すべて統一:**
```python
return "社員番号またはパスワードが正しくありません"
```

**理由:**
- アカウントの存在を推測できない
- 有効な社員番号リストを作成できない
- Enumeration Attack を防止

### **3. タイミング攻撃対策**

```python
def authenticate(self, request, username=None, password=None):
    user = User.objects.filter(employee_id=username).first()
    
    if not user:
        # ユーザー不在でもパスワード処理を実行
        # → 処理時間を統一
        User().set_password(password)
        return None
    
    if user.check_password(password):
        return user
    
    return None
```

**攻撃者の推測を防ぐ:**
```
存在するユーザー   → パスワードチェック（0.1秒）
存在しないユーザー → ダミー処理（0.1秒）
→ 処理時間が同じなので、存在確認できない
```

---

## 🌐 多言語対応アーキテクチャ

### **バックエンド（Django）**

```python
# 1. 翻訳マーク
from django.utils.translation import gettext_lazy as _

error_message = _("社員番号は必須です")

# 2. 翻訳ファイル
# locale/ja/LC_MESSAGES/django.po
msgid "社員番号は必須です"
msgstr "社員番号は必須です"

# locale/en/LC_MESSAGES/django.po
msgid "社員番号は必須です"
msgstr "Employee ID is required"

# 3. コンパイル
python compile_translations.py
# → django.mo ファイル生成

# 4. 言語切り替え
from django.utils.translation import activate
activate('en')  # 英語に切り替え
```

### **フロントエンド（Vue.js）**

```javascript
// 1. 翻訳ファイル
// locales/ja.json
{
  "auth": {
    "login": "ログイン"
  }
}

// locales/en.json
{
  "auth": {
    "login": "Login"
  }
}

// 2. 使用
import { useI18n } from 'vue-i18n'
const { t } = useI18n()

const message = t('auth.login')
// 日本語: "ログイン"
// 英語: "Login"
```

### **言語切り替えフロー**

```
┌─────────┐                              ┌─────────┐
│         │  1. Accept-Language: ja      │         │
│ Client  │ ─────────────────────────►   │ Backend │
│         │                              │         │
└─────────┘                              └─────────┘
                                              │
                                              │ 2. Middleware
                                              ▼
                                    ┌──────────────────┐
                                    │LanguageMiddleware│
                                    │ - Header 解析    │
                                    │ - activate('ja') │
                                    └──────────────────┘
                                              │
                                              │ 3. Translation
                                              ▼
                                    ┌──────────────────┐
                                    │ gettext_lazy     │
                                    │ - 翻訳ファイル参照│
                                    │ - メッセージ返却  │
                                    └──────────────────┘
                                              │
                                              │ 4. Response
┌─────────┐                              ┌─────────┐
│         │  ◄─────────────────────────  │         │
│ Client  │  { detail: "社員番号は必須です" } │ Backend │
│         │                              │         │
└─────────┘                              └─────────┘
```

---

## 🔄 状態管理（Pinia）

### **Store 設計**

```javascript
// stores/auth.js
export const useAuthStore = defineStore('auth', {
  state: () => ({
    user: null,           // ログインユーザー情報
    isAuthenticated: false,
    isLoading: false,
  }),
  
  actions: {
    async login(credentials) {
      // ログイン処理
    },
    
    async logout() {
      // ログアウト処理
    },
    
    async fetchUser() {
      // ユーザー情報取得
    },
  },
  
  getters: {
    isAdmin: (state) => state.user?.is_admin || false,
  },
})
```

### **Store の役割分担**

| Store | 責務 |
|-------|------|
| `authStore` | 認証状態・ログインユーザー |
| `userStore` | ユーザー一覧・CRUD操作 |
| `notificationStore` | 通知メッセージ |
| `localeStore` | 言語設定 |

---

## 📡 API設計

### **RESTful エンドポイント**

```
┌────────────────────────────────────────────────────┐
│ 認証 API                                            │
├────────────────────────────────────────────────────┤
│ POST   /api/auth/csrf/          CSRFトークン取得   │
│ POST   /api/auth/login/         ログイン            │
│ POST   /api/auth/logout/        ログアウト          │
│ GET    /api/auth/me/            現在のユーザー情報  │
└────────────────────────────────────────────────────┘

┌────────────────────────────────────────────────────┐
│ ユーザー管理 API                                    │
├────────────────────────────────────────────────────┤
│ GET    /api/users/              一覧取得            │
│ POST   /api/users/              作成                │
│ GET    /api/users/{id}/         詳細取得            │
│ PUT    /api/users/{id}/         更新                │
│ PATCH  /api/users/{id}/         部分更新            │
│ DELETE /api/users/{id}/         削除（論理）        │
│                                                     │
│ POST   /api/users/bulk-delete/  一括削除            │
│ POST   /api/users/bulk-restore/ 一括復元            │
│ POST   /api/users/{id}/restore/ 復元                │
│ GET    /api/users/deleted/      削除済み一覧        │
│ GET    /api/users/stats/        統計情報            │
│ GET    /api/users/admin-count/  管理者数            │
└────────────────────────────────────────────────────┘
```

### **レスポンス形式**

**成功時:**
```json
{
  "id": 1,
  "employee_id": "EMP001",
  "username": "太郎",
  "email": "taro@example.com",
  "is_admin": true,
  "is_active": true
}
```

**エラー時:**
```json
{
  "error_code": "INVALID_CREDENTIALS",
  "detail": "社員番号またはパスワードが正しくありません"
}
```

**バリデーションエラー:**
```json
{
  "employee_id": ["社員番号は必須です"],
  "password": ["パスワードは8文字以上で入力してください"]
}
```

---

## 🎯 エラーハンドリング戦略

### **階層別エラー処理**

```
┌──────────────────────────────────────────┐
│         Validation Error                 │
│  (Serializer - 入力チェック)             │
│  → 400 Bad Request                       │
│  → { "field": ["エラーメッセージ"] }    │
└──────────────────────────────────────────┘
                  ↓
┌──────────────────────────────────────────┐
│       Business Logic Error               │
│  (Service - ビジネスルール違反)          │
│  → UserServiceException                  │
│  → { "error_code": "...", "detail": "..." }│
└──────────────────────────────────────────┘
                  ↓
┌──────────────────────────────────────────┐
│         System Error                     │
│  (予期しないエラー)                       │
│  → 500 Internal Server Error             │
│  → ログに記録、汎用メッセージを返却       │
└──────────────────────────────────────────┘
```

### **カスタム例外クラス**

```python
# exceptions.py
class UserServiceException(Exception):
    """ビジネスロジックエラーの基底クラス"""
    def __init__(self, error_code, detail, status_code=400):
        self.error_code = error_code
        self.detail = detail
        self.status_code = status_code

# 具体的な例外
class LastAdminError(UserServiceException):
    """最後の管理者削除エラー"""

class CannotDeleteSelfError(UserServiceException):
    """自己削除エラー"""
```

---

## 📊 データベース設計

### **ER図**

```
┌─────────────────────────────────────┐
│            User                     │
├─────────────────────────────────────┤
│ PK  id              INTEGER         │
│     employee_id     VARCHAR(50)     │
│     username        VARCHAR(50)     │
│     email           VARCHAR(255)    │
│     password        VARCHAR(128)    │
│     is_admin        BOOLEAN         │
│     is_active       BOOLEAN         │
│     is_staff        BOOLEAN         │
│     is_superuser    BOOLEAN         │
│     created_at      DATETIME        │
│     updated_at      DATETIME        │
│     deleted_at      DATETIME (NULL) │
│     last_login      DATETIME (NULL) │
└─────────────────────────────────────┘

【インデックス】
- employee_id (B-Tree)
- is_active (B-Tree)
- deleted_at (B-Tree)
- (is_admin, is_active) (複合)
- created_at DESC (B-Tree)

【制約】
- unique_active_employee_id:
  UNIQUE (employee_id) WHERE deleted_at IS NULL
```

### **インデックス設計の理由**

| インデックス | 用途 |
|-------------|------|
| `employee_id` | ログイン認証（高頻度） |
| `is_active` | アクティブユーザー絞り込み |
| `deleted_at` | 削除済み/アクティブ判定 |
| `(is_admin, is_active)` | 管理者数カウント（最適化） |
| `created_at DESC` | 一覧ページのソート |

---

## 🔧 パフォーマンス最適化

### **1. N+1問題の回避**

```python
# ❌ 悪い例（N+1問題）
users = User.objects.all()
for user in users:
    print(user.groups.all())  # 各ユーザーごとにクエリ発行

# ✅ 良い例
users = User.objects.prefetch_related('groups')
for user in users:
    print(user.groups.all())  # 1回のクエリで取得済み
```

### **2. キャッシュ戦略**

```python
# ログイン試行回数をキャッシュ
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
        "LOCATION": "unique-snowflake",
    }
}

# Redis に変更可能（本番環境）
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",
    }
}
```

### **3. ページネーション**

```python
# DRF の PageNumberPagination
class UserPagination(PageNumberPagination):
    page_size = 10              # 1ページあたり10件
    page_size_query_param = "page_size"
    max_page_size = 100         # 最大100件まで
```

---

## 🧪 テスト戦略

### **テストピラミッド**

```
           ┌────────┐
          /  E2E    \     ← 少数（重要なユーザーフロー）
         /           \
        ┌─────────────┐
       /  Integration \   ← 中程度（API統合テスト）
      /                \
     ┌──────────────────┐
    /    Unit Tests      \ ← 多数（関数・メソッド単位）
   /                      \
  └────────────────────────┘
```

### **テストの種類**

| レベル | 対象 | 例 |
|--------|------|-----|
| **Unit** | 関数・メソッド | `UserService.create_user()` |
| **Integration** | API エンドポイント | `POST /api/users/` |
| **E2E** | ユーザーフロー | ログイン → ユーザー作成 → ログアウト |

---

このドキュメントは、システムの設計思想と実装の詳細をまとめたものです。  
新しい機能を追加する際は、このアーキテクチャに従って実装してください。

===========================================================================================

# 開発ガイド

新人エンジニア向けの実装ガイドです。このプロジェクトで機能を追加する際の手順とベストプラクティスをまとめています。

---

## 🎯 開発フロー

```
1. Issue 作成
   ↓
2. Feature ブランチ作成
   ↓
3. 実装（TDD推奨）
   ↓
4. テスト実行
   ↓
5. コミット
   ↓
6. Pull Request
   ↓
7. コードレビュー
   ↓
8. マージ
```

---

## 📝 コーディング規約

### **Python（Django）**

```python
# ✅ 良い例

# 1. 命名規則
class UserService:              # クラス: PascalCase
    def create_user(self):      # 関数: snake_case
        pass

MAX_LOGIN_ATTEMPTS = 10        # 定数: UPPER_SNAKE_CASE
user_count = 0                 # 変数: snake_case

# 2. Docstring
def create_user(validated_data):
    """
    ユーザー作成
    
    Args:
        validated_data: バリデーション済みデータ
        
    Returns:
        作成されたユーザー
        
    Raises:
        ValidationError: バリデーションエラー
    """
    pass

# 3. Import順序
# 標準ライブラリ
from datetime import timedelta

# サードパーティ
from django.db import models
from rest_framework import serializers

# 自作モジュール
from .models import User
from common.mixins import ErrorResponseMixin

# 4. 行の長さ
# 最大88文字（Black フォーマッター推奨）
```

### **JavaScript（Vue.js）**

```javascript
// ✅ 良い例

// 1. 命名規則
class UserService {}            // クラス: PascalCase
const createUser = () => {}     // 関数: camelCase
const MAX_RETRY_COUNT = 3       // 定数: UPPER_SNAKE_CASE
let userCount = 0               // 変数: camelCase

// 2. コンポーネント名
export default {
  name: 'UserListView',         // PascalCase
}

// 3. Props定義
defineProps({
  userId: {
    type: Number,
    required: true,
    default: 0,
  }
})

// 4. JSDoc
/**
 * ユーザー作成
 * @param {Object} userData - ユーザーデータ
 * @returns {Promise<Object>} 作成されたユーザー
 */
async function createUser(userData) {
  // ...
}
```

---

## 🛠️ 新機能の追加手順

### **例: 「部署管理機能」を追加**

---

### **Phase 1: バックエンド（Django）**

#### **Step 1: モデル作成**

```python
# departments/models.py
from django.db import models
from django.utils import timezone

class Department(models.Model):
    """部署モデル"""
    
    name = models.CharField("部署名", max_length=100)
    code = models.CharField("部署コード", max_length=20, unique=True)
    created_at = models.DateTimeField("作成日時", default=timezone.now)
    updated_at = models.DateTimeField("更新日時", auto_now=True)
    deleted_at = models.DateTimeField("削除日時", null=True, blank=True)
    
    class Meta:
        db_table = "departments"
        verbose_name = "部署"
        verbose_name_plural = "部署"
        ordering = ["code"]
    
    def __str__(self):
        return f"{self.code} - {self.name}"
    
    def soft_delete(self):
        """論理削除"""
        self.deleted_at = timezone.now()
        self.save(update_fields=["deleted_at"])
```

#### **Step 2: マイグレーション**

```bash
# マイグレーションファイル作成
python manage.py makemigrations departments

# SQL確認
python manage.py sqlmigrate departments 0001

# 適用
python manage.py migrate
```

#### **Step 3: シリアライザー作成**

```python
# departments/serializers.py
from rest_framework import serializers
from django.utils.translation import gettext_lazy as _
from .models import Department

class DepartmentSerializer(serializers.ModelSerializer):
    """部署情報取得用"""
    
    class Meta:
        model = Department
        fields = ["id", "name", "code", "created_at", "updated_at"]
        read_only_fields = ["id", "created_at", "updated_at"]

class DepartmentCreateSerializer(serializers.ModelSerializer):
    """部署作成用"""
    
    name = serializers.CharField(
        required=True,
        max_length=100,
        error_messages={
            "required": _("部署名は必須です"),
            "blank": _("部署名は必須です"),
        },
    )
    
    code = serializers.CharField(
        required=True,
        max_length=20,
        error_messages={
            "required": _("部署コードは必須です"),
            "unique": _("この部署コードは既に使用されています"),
        },
    )
    
    class Meta:
        model = Department
        fields = ["name", "code"]
```

#### **Step 4: ビューセット作成**

```python
# departments/views.py
from rest_framework import viewsets, status
from rest_framework.permissions import IsAuthenticated
from .models import Department
from .serializers import DepartmentSerializer, DepartmentCreateSerializer
from users.permissions import IsAdminUser

class DepartmentViewSet(viewsets.ModelViewSet):
    """部署管理API"""
    
    queryset = Department.objects.all()
    permission_classes = [IsAuthenticated, IsAdminUser]
    
    def get_serializer_class(self):
        if self.action == "create":
            return DepartmentCreateSerializer
        return DepartmentSerializer
```

#### **Step 5: URL設定**

```python
# departments/urls.py
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from .views import DepartmentViewSet

router = DefaultRouter()
router.register(r"departments", DepartmentViewSet)

urlpatterns = [
    path("api/", include(router.urls)),
]

# config/urls.py に追加
urlpatterns = [
    path("", include("departments.urls")),
]
```

#### **Step 6: テスト作成**

```python
# departments/tests.py
from django.test import TestCase
from django.contrib.auth import get_user_model
from .models import Department

User = get_user_model()

class DepartmentModelTest(TestCase):
    """部署モデルのテスト"""
    
    def setUp(self):
        self.department = Department.objects.create(
            name="開発部",
            code="DEV001"
        )
    
    def test_create_department(self):
        """部署作成テスト"""
        self.assertEqual(self.department.name, "開発部")
        self.assertEqual(self.department.code, "DEV001")
    
    def test_soft_delete(self):
        """論理削除テスト"""
        self.department.soft_delete()
        self.assertIsNotNone(self.department.deleted_at)

class DepartmentAPITest(TestCase):
    """部署APIのテスト"""
    
    def setUp(self):
        # 管理者ユーザー作成
        self.admin = User.objects.create_user(
            employee_id="9999",
            username="管理者",
            password="test1234",
            is_admin=True
        )
        self.client.login(username="9999", password="test1234")
    
    def test_list_departments(self):
        """一覧取得テスト"""
        response = self.client.get("/api/departments/")
        self.assertEqual(response.status_code, 200)
    
    def test_create_department(self):
        """作成テスト"""
        data = {
            "name": "営業部",
            "code": "SALES001"
        }
        response = self.client.post("/api/departments/", data)
        self.assertEqual(response.status_code, 201)
```

#### **Step 7: 翻訳追加**

```bash
# 翻訳マーク追加後
python manage.py makemessages -l ja
python manage.py makemessages -l en

# 翻訳ファイル編集
# locale/ja/LC_MESSAGES/django.po
# locale/en/LC_MESSAGES/django.po

# コンパイル
python compile_translations.py
```

---

### **Phase 2: フロントエンド（Vue.js）**

#### **Step 1: API クライアント作成**

```javascript
// src/api/departments.js
import apiClient from './client'

export default {
  // 一覧取得
  list(params) {
    return apiClient.get('/api/departments/', { params })
  },
  
  // 詳細取得
  get(id) {
    return apiClient.get(`/api/departments/${id}/`)
  },
  
  // 作成
  create(data) {
    return apiClient.post('/api/departments/', data)
  },
  
  // 更新
  update(id, data) {
    return apiClient.put(`/api/departments/${id}/`, data)
  },
  
  // 削除
  delete(id) {
    return apiClient.delete(`/api/departments/${id}/`)
  },
}
```

#### **Step 2: Pinia ストア作成**

```javascript
// src/stores/department.js
import { defineStore } from 'pinia'
import departmentApi from '@/api/departments'

export const useDepartmentStore = defineStore('department', {
  state: () => ({
    departments: [],
    currentDepartment: null,
    isLoading: false,
  }),
  
  actions: {
    async fetchDepartments() {
      this.isLoading = true
      try {
        const response = await departmentApi.list()
        this.departments = response.data.results || response.data
      } catch (error) {
        console.error('部署一覧取得エラー:', error)
        throw error
      } finally {
        this.isLoading = false
      }
    },
    
    async createDepartment(data) {
      try {
        const response = await departmentApi.create(data)
        this.departments.push(response.data)
        return response.data
      } catch (error) {
        console.error('部署作成エラー:', error)
        throw error
      }
    },
  },
  
  getters: {
    getDepartmentById: (state) => (id) => {
      return state.departments.find(dept => dept.id === id)
    },
  },
})
```

#### **Step 3: ビューコンポーネント作成**

```vue
<!-- src/views/departments/DepartmentListView.vue -->
<template>
  <v-container>
    <v-row>
      <v-col cols="12">
        <h1>{{ t('pages.departments.list.title') }}</h1>
      </v-col>
    </v-row>
    
    <v-row>
      <v-col cols="12">
        <v-btn color="primary" @click="openCreateDialog">
          {{ t('buttons.create') }}
        </v-btn>
      </v-col>
    </v-row>
    
    <v-row>
      <v-col cols="12">
        <v-data-table
          :headers="headers"
          :items="departments"
          :loading="isLoading"
        >
          <template #item.actions="{ item }">
            <v-btn icon size="small" @click="editDepartment(item)">
              <v-icon>mdi-pencil</v-icon>
            </v-btn>
            <v-btn icon size="small" @click="deleteDepartment(item)">
              <v-icon>mdi-delete</v-icon>
            </v-btn>
          </template>
        </v-data-table>
      </v-col>
    </v-row>
  </v-container>
</template>

<script setup>
import { ref, computed, onMounted } from 'vue'
import { useI18n } from 'vue-i18n'
import { useDepartmentStore } from '@/stores/department'

const { t } = useI18n()
const departmentStore = useDepartmentStore()

const headers = computed(() => [
  { title: t('form.fields.id'), key: 'id' },
  { title: t('form.fields.code'), key: 'code' },
  { title: t('form.fields.name'), key: 'name' },
  { title: t('common.actions'), key: 'actions', sortable: false },
])

const departments = computed(() => departmentStore.departments)
const isLoading = computed(() => departmentStore.isLoading)

onMounted(async () => {
  await departmentStore.fetchDepartments()
})

function openCreateDialog() {
  // ダイアログ表示処理
}

function editDepartment(department) {
  // 編集処理
}

function deleteDepartment(department) {
  // 削除処理
}
</script>
```

#### **Step 4: ルーティング設定**

```javascript
// src/router/index.js
const routes = [
  {
    path: '/departments',
    name: 'DepartmentList',
    component: () => import('@/views/departments/DepartmentListView.vue'),
    meta: { requiresAuth: true, requiresAdmin: true },
  },
  {
    path: '/departments/create',
    name: 'DepartmentCreate',
    component: () => import('@/views/departments/DepartmentCreateView.vue'),
    meta: { requiresAuth: true, requiresAdmin: true },
  },
]
```

#### **Step 5: 翻訳追加**

```json
// src/locales/ja.json
{
  "pages": {
    "departments": {
      "list": {
        "title": "部署管理"
      }
    }
  },
  "form": {
    "fields": {
      "code": "部署コード",
      "departmentName": "部署名"
    }
  }
}

// src/locales/en.json
{
  "pages": {
    "departments": {
      "list": {
        "title": "Department Management"
      }
    }
  },
  "form": {
    "fields": {
      "code": "Department Code",
      "departmentName": "Department Name"
    }
  }
}
```

---

## 🐛 デバッグ方法

### **バックエンド（Django）**

#### **1. Django Shell でデバッグ**

```bash
python manage.py shell

# ユーザー作成テスト
>>> from django.contrib.auth import get_user_model
>>> User = get_user_model()
>>> user = User.objects.create_user(
...     employee_id="TEST001",
...     username="テスト",
...     password="test1234"
... )
>>> user.employee_id
'TEST001'

# パスワード確認
>>> user.check_password("test1234")
True

# 論理削除テスト
>>> user.soft_delete()
>>> user.deleted_at
datetime.datetime(2025, 1, 20, 10, 0, 0)

# 復元テスト
>>> user.restore()
>>> user.deleted_at
None
```

#### **2. Django Debug Toolbar**

```bash
# インストール
pip install django-debug-toolbar

# settings.py に追加
INSTALLED_APPS = [
    'debug_toolbar',
]

MIDDLEWARE = [
    'debug_toolbar.middleware.DebugToolbarMiddleware',
]

INTERNAL_IPS = ['127.0.0.1']
```

#### **3. ログ出力**

```python
import logging

logger = logging.getLogger(__name__)

def create_user(validated_data):
    logger.info(f"ユーザー作成開始: {validated_data}")
    
    try:
        user = User.objects.create_user(**validated_data)
        logger.info(f"ユーザー作成成功: {user.id}")
        return user
    except Exception as e:
        logger.error(f"ユーザー作成失敗: {str(e)}")
        raise
```

### **フロントエンド（Vue.js）**

#### **1. Vue Devtools**

```bash
# Chrome 拡張機能をインストール
# https://chrome.google.com/webstore/detail/vuejs-devtools
```

#### **2. Console でデバッグ**

```javascript
// コンポーネント内
import { getCurrentInstance } from 'vue'

export default {
  setup() {
    const instance = getCurrentInstance()
    console.log('Current component:', instance)
    
    // Store確認
    const userStore = useUserStore()
    console.log('Users:', userStore.users)
  }
}
```

#### **3. API呼び出しのデバッグ**

```javascript
// src/api/client.js
import axios from 'axios'

const apiClient = axios.create({
  baseURL: import.meta.env.VITE_API_URL,
})

// リクエストログ
apiClient.interceptors.request.use(
  (config) => {
    console.log('API Request:', config.method.toUpperCase(), config.url, config.data)
    return config
  }
)

// レスポンスログ
apiClient.interceptors.response.use(
  (response) => {
    console.log('API Response:', response.status, response.data)
    return response
  },
  (error) => {
    console.error('API Error:', error.response?.status, error.response?.data)
    return Promise.reject(error)
  }
)
```

---

## 🧪 テストの書き方

### **バックエンド（Django）**

#### **モデルテスト**

```python
from django.test import TestCase
from .models import User

class UserModelTest(TestCase):
    def test_create_user(self):
        """ユーザー作成テスト"""
        user = User.objects.create_user(
            employee_id="TEST001",
            username="テスト",
            password="test1234"
        )
        self.assertEqual(user.employee_id, "TEST001")
        self.assertTrue(user.check_password("test1234"))
    
    def test_soft_delete(self):
        """論理削除テスト"""
        user = User.objects.create_user(
            employee_id="TEST002",
            username="テスト2",
            password="test1234"
        )
        user.soft_delete()
        
        # deleted_at が設定されている
        self.assertIsNotNone(user.deleted_at)
        # is_active が False
        self.assertFalse(user.is_active)
        # User.objects では取得できない
        self.assertFalse(User.objects.filter(id=user.id).exists())
        # User.all_objects では取得できる
        self.assertTrue(User.all_objects.filter(id=user.id).exists())
```

#### **APIテスト**

```python
from rest_framework.test import APITestCase
from django.contrib.auth import get_user_model

User = get_user_model()

class UserAPITest(APITestCase):
    def setUp(self):
        # テストユーザー作成
        self.admin = User.objects.create_user(
            employee_id="ADMIN",
            username="管理者",
            password="test1234",
            is_admin=True
        )
        # ログイン
        self.client.force_authenticate(user=self.admin)
    
    def test_list_users(self):
        """一覧取得テスト"""
        response = self.client.get("/api/users/")
        self.assertEqual(response.status_code, 200)
        self.assertIn("results", response.data)
    
    def test_create_user(self):
        """作成テスト"""
        data = {
            "employee_id": "TEST003",
            "username": "テスト3",
            "password": "test1234",
            "email": "test3@example.com",
            "is_admin": False,
        }
        response = self.client.post("/api/users/", data)
        self.assertEqual(response.status_code, 201)
        self.assertEqual(response.data["employee_id"], "TEST003")
```

### **フロントエンド（Vue.js）**

#### **コンポーネントテスト**

```javascript
// tests/unit/components/UserList.spec.js
import { mount } from '@vue/test-utils'
import { createPinia, setActivePinia } from 'pinia'
import UserList from '@/components/UserList.vue'

describe('UserList.vue', () => {
  beforeEach(() => {
    setActivePinia(createPinia())
  })
  
  it('ユーザー一覧を表示', async () => {
    const wrapper = mount(UserList, {
      global: {
        plugins: [createPinia()],
      },
    })
    
    // ユーザーが表示されているか
    expect(wrapper.text()).toContain('ユーザー管理')
  })
  
  it('作成ボタンをクリック', async () => {
    const wrapper = mount(UserList)
    
    await wrapper.find('[data-testid="create-button"]').trigger('click')
    
    // ダイアログが表示されているか
    expect(wrapper.vm.showDialog).toBe(true)
  })
})
```

---

## 📊 コミットメッセージ規約

### **フォーマット**

```
<type>(<scope>): <subject>

<body>

<footer>
```

### **Type**

| Type | 説明 | 例 |
|------|------|-----|
| `feat` | 新機能 | `feat(users): 部署フィールド追加` |
| `fix` | バグ修正 | `fix(auth): ログインエラー修正` |
| `docs` | ドキュメント | `docs: README更新` |
| `style` | コードスタイル | `style: フォーマット修正` |
| `refactor` | リファクタリング | `refactor: user_serviceを分割` |
| `test` | テスト追加 | `test: ユーザーAPIテスト追加` |
| `chore` | 雑務 | `chore: 依存関係更新` |

### **例**

```bash
# 良い例
git commit -m "feat(users): 部署管理機能追加

- Department モデル作成
- CRUD API実装
- フロントエンド画面作成

Closes #123"

# 悪い例
git commit -m "update"  # 何を変更したか不明
git commit -m "fix bug"  # どのバグか不明
```

---

## 🚀 デプロイ前チェックリスト

### **バックエンド**

- [ ] `DEBUG = False` に設定
- [ ] `SECRET_KEY` を環境変数に移動
- [ ] `ALLOWED_HOSTS` を設定
- [ ] データベースを PostgreSQL に変更
- [ ] 静的ファイルを収集（`python manage.py collectstatic`）
- [ ] マイグレーション実行
- [ ] スーパーユーザー作成
- [ ] HTTPS 有効化
- [ ] CSRF/CORS 設定確認

### **フロントエンド**

- [ ] 本番用ビルド（`npm run build`）
- [ ] API URL を本番環境に変更
- [ ] エラーログ設定
- [ ] PWA 設定（オプション）

---

## 💡 よくある質問

### **Q1: 論理削除されたユーザーを復元するには？**

```python
# Shell
python manage.py shell
>>> from django.contrib.auth import get_user_model
>>> User = get_user_model()
>>> user = User.all_objects.get(id=1)
>>> user.restore()

# API
POST /api/users/1/restore/
```

### **Q2: 管理者が0人になってしまった場合は？**

```python
python manage.py shell
>>> from django.contrib.auth import get_user_model
>>> User = get_user_model()
>>> user = User.objects.get(employee_id="9999")
>>> user.is_admin = True
>>> user.save()
```

### **Q3: キャッシュをクリアするには？**

```python
python manage.py shell
>>> from django.core.cache import cache
>>> cache.clear()
```

---

このガイドは随時更新されます。質問や追加して欲しい内容があれば Issue で教えてください！

===============================================================================

