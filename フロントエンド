# 📚 フロントエンド開発ドキュメント

> 新人エンジニア向け - このプロジェクトのフロントエンド完全ガイド

---

## 📋 目次

1. [プロジェクト概要](#プロジェクト概要)
2. [技術スタック](#技術スタック)
3. [プロジェクト構成](#プロジェクト構成)
4. [開発環境セットアップ](#開発環境セットアップ)
5. [コーディング規約](#コーディング規約)
6. [重要な設計パターン](#重要な設計パターン)
7. [よくあるタスク](#よくあるタスク)
8. [トラブルシューティング](#トラブルシューティング)

---

## 🎯 プロジェクト概要

### このプロジェクトは何？

**ユーザー管理機能を持つSPA（Single Page Application）**

- 認証・認可（ログイン・権限管理）
- ユーザーCRUD（作成・読取・更新・削除）
- レスポンシブデザイン（PC/タブレット対応）
- 多言語対応（日本語/英語）

### アーキテクチャ

```
フロントエンド（このプロジェクト）
    ↕ REST API
バックエンド（Django REST Framework）
```

---

## 🛠️ 技術スタック

| 技術 | バージョン | 用途 |
|------|-----------|------|
| **Vue.js** | 3.5.18 | フレームワーク |
| **Vuetify** | 3.9.7 | UIコンポーネント |
| **Pinia** | 3.0.3 | 状態管理 |
| **Vue Router** | 4.5.1 | ルーティング |
| **Axios** | 1.11.0 | HTTP通信 |
| **vue-i18n** | - | 多言語化 |
| **Vite** | 7.0.6 | ビルドツール |

### なぜこの技術を選んだ？

- **Vue 3 Composition API**: 再利用性が高く、TypeScriptとの相性が良い
- **Vuetify 3**: Material Designの実装が簡単
- **Pinia**: Vuex より軽量で使いやすい
- **Vite**: 高速な開発サーバー

---

## 📁 プロジェクト構成

```
frontend/
├── src/
│   ├── api/              # API通信層
│   │   ├── auth.js       # 認証API
│   │   └── users.js      # ユーザーAPI
│   │
│   ├── assets/           # 静的ファイル
│   │   └── style/
│   │       └── main.scss # グローバルスタイル
│   │
│   ├── components/       # 再利用可能なコンポーネント
│   │   ├── Header.vue
│   │   ├── Footer.vue
│   │   ├── NavBar.vue
│   │   ├── SideBar.vue
│   │   ├── Notification.vue
│   │   ├── MenuCard.vue
│   │   ├── MenuCardGrid.vue
│   │   └── ConfirmDialog.vue
│   │
│   ├── composables/      # 再利用可能なロジック
│   │   ├── useValidation.js   # バリデーション
│   │   ├── useApiError.js     # エラー処理
│   │   └── usePermissions.js  # 権限管理
│   │
│   ├── constants/        # 定数定義
│   │   ├── routes.js     # ルート定義
│   │   ├── icons.js      # アイコン定義
│   │   ├── theme.js      # テーマ設定
│   │   └── breakpoints.js # 画面サイズ
│   │
│   ├── locales/          # 多言語ファイル
│   │   ├── ja.json       # 日本語
│   │   └── en.json       # 英語
│   │
│   ├── plugins/          # Vue プラグイン
│   │   ├── axios.js      # Axios設定
│   │   ├── vuetify.js    # Vuetify設定
│   │   └── i18n.js       # 多言語設定
│   │
│   ├── router/           # ルーティング
│   │   ├── index.js            # ルート定義
│   │   ├── auth-guard.js       # 認証ガード
│   │   ├── admin-guard.js      # 管理者ガード
│   │   └── screen-size-guard.js # 画面サイズガード
│   │
│   ├── stores/           # Pinia ストア
│   │   ├── auth.js       # 認証状態
│   │   ├── notification.js # 通知
│   │   ├── locale.js     # 言語設定
│   │   └── ui.js         # UI状態
│   │
│   ├── utils/            # ユーティリティ
│   │   └── validation.js # バリデーション関数
│   │
│   ├── views/            # ページコンポーネント
│   │   ├── Home.vue
│   │   ├── Login.vue
│   │   ├── Settings.vue
│   │   ├── admin/
│   │   │   └── AdminMenu.vue
│   │   ├── users/
│   │   │   ├── UserList.vue
│   │   │   ├── UserCreate.vue
│   │   │   ├── UserDetail.vue
│   │   │   ├── UserUpdate.vue
│   │   │   └── UserDelete.vue
│   │   └── errors/
│   │       └── UnsupportedDevice.vue
│   │
│   ├── App.vue           # ルートコンポーネント
│   └── main.js           # エントリーポイント
│
├── .env                  # 環境変数
├── package.json          # 依存関係
└── vite.config.js        # Vite設定
```

### 📂 ディレクトリの役割

#### `api/` - API通信
- バックエンドとの通信を担当
- 例: `usersAPI.list()`, `authAPI.login()`

#### `components/` - 再利用可能なUI
- 複数ページで使うコンポーネント
- 例: ヘッダー、フッター、ボタン

#### `composables/` - ロジックの再利用
- Vue 3 Composition APIの恩恵
- 例: バリデーション、エラー処理

#### `stores/` - グローバル状態管理
- ログイン情報、通知など
- Pinia を使用

#### `views/` - ページ
- URLに対応するコンポーネント
- 例: `/login` → `Login.vue`

---

## 🚀 開発環境セットアップ

### 1️⃣ 必須ソフトウェア

```bash
# Node.js（推奨: v20.19.0 以上）
node -v

# npm または yarn
npm -v
```

### 2️⃣ プロジェクトのクローン

```bash
git clone <リポジトリURL>
cd frontend
```

### 3️⃣ 依存関係のインストール

```bash
npm install
```

### 4️⃣ 環境変数の設定

`.env` ファイルを作成:

```env
# バックエンドAPIのURL
VITE_API_BASE_URL=http://localhost:8000/api/

# タイムアウト（ミリ秒）
VITE_API_TIMEOUT=5000

# アプリバージョン
VITE_APP_VERSION=1.0.0
```

### 5️⃣ 開発サーバーの起動

```bash
npm run dev
```

ブラウザで `http://localhost:5173` を開く

### 6️⃣ ビルド（本番環境用）

```bash
npm run build
```

生成物は `dist/` に出力される

---

## 📝 コーディング規約

### ✅ Vue 3 Composition API

**必ず Composition API を使う**（Options API は使わない）

```vue
<!-- ✅ 正しい -->
<script setup>
import { ref, computed } from 'vue';

const count = ref(0);
const double = computed(() => count.value * 2);
</script>

<!-- ❌ 使わない -->
<script>
export default {
  data() {
    return { count: 0 };
  }
}
</script>
```

### ✅ ファイル命名規則

| 種類 | 命名規則 | 例 |
|------|----------|-----|
| コンポーネント | PascalCase | `UserList.vue` |
| Composable | camelCase + use | `useValidation.js` |
| Store | camelCase | `auth.js` |
| 定数ファイル | camelCase | `routes.js` |

### ✅ 変数命名規則

```javascript
// ✅ 正しい
const userName = ref('');
const isLoading = ref(false);
const userList = ref([]);

// ❌ 避ける
const user_name = ref(''); // スネークケース
const loading = ref(false); // 曖昧
const users = ref([]); // list が明確
```

### ✅ コメント規則

```javascript
// ⭐ 重要な処理や分かりにくい箇所にコメント
// ✅ 良いコメント例
async function fetchUsers() {
    // ⭐ 重複リクエスト防止
    if (loading.value) return;
    
    loading.value = true;
    // ... 処理
}

// ❌ 不要なコメント
const count = ref(0); // countを定義 ← 見れば分かる
```

---

## 🎨 重要な設計パターン

### 1️⃣ エラーハンドリング

**必ず `useApiError` を使う**

```vue
<script setup>
import { useApiError } from '@/composables/useApiError';

const { handleApiError, showSuccess } = useApiError();

async function saveData() {
    try {
        await api.save(data);
        showSuccess('保存しました');
    } catch (error) {
        handleApiError(error); // ⭐ 自動で通知表示
    }
}
</script>
```

### 2️⃣ 重複送信防止

**必ず loading チェックを最優先に**

```vue
<script setup>
const loading = ref(false);

async function onSubmit() {
    // ⭐ 最優先チェック
    if (loading.value) return;
    
    loading.value = true;
    try {
        await api.submit(data);
    } finally {
        loading.value = false;
    }
}
</script>
```

### 3️⃣ バリデーション

**`useValidation` を使う**

```vue
<script setup>
import { useValidation } from '@/composables/useValidation';

const { createRules } = useValidation();

const usernameRules = createRules.username();
const passwordRules = createRules.newPassword();
</script>

<template>
    <v-text-field
        v-model="username"
        :rules="usernameRules"
    />
</template>
```

### 4️⃣ 多言語化

**必ず `t()` を使う**

```vue
<script setup>
import { useI18n } from 'vue-i18n';

const { t } = useI18n();
</script>

<template>
    <!-- ✅ 正しい -->
    <h1>{{ t('pages.home.title') }}</h1>
    
    <!-- ❌ ハードコードしない -->
    <h1>ホーム</h1>
</template>
```

### 5️⃣ setTimeout vs nextTick

```javascript
// ✅ DOM更新待機
await nextTick();
element.focus();

// ✅ CSSアニメーション待機
setTimeout(() => {
    router.push('/next');
}, 150);

// ✅ デバウンス処理
setTimeout(() => {
    search();
}, 300);

// ❌ 不明確な遅延
setTimeout(() => {
    // なぜ100ms？
}, 100);
```

---

## 🔨 よくあるタスク

### 新しいページを追加する

#### 1️⃣ ページコンポーネントを作成

`src/views/NewPage.vue`

```vue
<script setup>
import { computed } from 'vue';
import { useI18n } from 'vue-i18n';
import Header from '@/components/Header.vue';
import { routes } from '@/constants/routes';

const { t } = useI18n();

const breadcrumbs = computed(() => [
    { title: t('breadcrumbs.home'), to: routes.HOME, disabled: false },
    { title: t('breadcrumbs.newPage'), disabled: true },
]);
</script>

<template>
    <Header :app-title="t('pages.newPage.title')" :breadcrumbs="breadcrumbs" />
    
    <v-container>
        <h1>新しいページ</h1>
    </v-container>
</template>
```

#### 2️⃣ ルートを追加

`src/constants/routes.js`

```javascript
export const routes = Object.freeze({
    // ... 既存のルート
    NEW_PAGE: '/new-page',
});
```

`src/router/index.js`

```javascript
{
    path: routes.NEW_PAGE,
    name: 'NewPage',
    component: () => import('@/views/NewPage.vue'),
    meta: {
        requiresAuth: true, // 認証必要
        requiresLargeScreen: true, // PC/タブレットのみ
    },
}
```

#### 3️⃣ 多言語ファイルに追加

`src/locales/ja.json`

```json
{
    "breadcrumbs": {
        "newPage": "新しいページ"
    },
    "pages": {
        "newPage": {
            "title": "新しいページ"
        }
    }
}
```

---

### 新しいAPIを追加する

`src/api/example.js`

```javascript
import api from '@/plugins/axios';

export const exampleAPI = {
    // 一覧取得
    async list(params) {
        return api.get('examples/', { params });
    },
    
    // 詳細取得
    async get(id) {
        return api.get(`examples/${id}/`);
    },
    
    // 作成
    async create(data) {
        return api.post('examples/', data);
    },
    
    // 更新
    async update(id, data) {
        return api.put(`examples/${id}/`, data);
    },
    
    // 削除
    async delete(id) {
        return api.delete(`examples/${id}/`);
    },
};
```

---

## 🐛 トラブルシューティング

### ❌ ログインできない

**チェックポイント:**

1. バックエンドが起動しているか？
2. `.env` の `VITE_API_BASE_URL` は正しいか？
3. ブラウザのコンソールにエラーが出ていないか？

```bash
# バックエンドの起動確認
curl http://localhost:8000/api/auth/csrf/
```

---

### ❌ 画面が真っ白

**よくある原因:**

1. JavaScript エラー（コンソール確認）
2. コンポーネントのインポート忘れ
3. Vuetify コンポーネントの書き方ミス

**解決方法:**

```bash
# ブラウザのコンソール（F12）を開いてエラー確認
```

---

### ❌ ホットリロードが効かない

```bash
# 開発サーバーを再起動
npm run dev
```

---

### ❌ ビルドが失敗する

```bash
# node_modules を削除して再インストール
rm -rf node_modules
npm install
```

---

## 📚 参考リンク

- [Vue 3 公式ドキュメント](https://vuejs.org/)
- [Vuetify 3 公式ドキュメント](https://vuetifyjs.com/)
- [Pinia 公式ドキュメント](https://pinia.vuejs.org/)
- [Vue Router 公式ドキュメント](https://router.vuejs.org/)

---

## 🎓 学習の進め方

### 1週目: 基礎理解
- Vue 3 Composition API の基本
- Vuetify コンポーネントの使い方
- プロジェクト構成の理解

### 2週目: 実践
- 既存ページの修正
- 簡単な機能追加
- エラーハンドリングの実装

### 3週目: 応用
- 新しいページの作成
- API連携の実装
- 状態管理の理解

---

## ❓ 困ったら

1. **エラーメッセージをよく読む**
2. **ブラウザのコンソールを確認**
3. **公式ドキュメントを確認**


---
