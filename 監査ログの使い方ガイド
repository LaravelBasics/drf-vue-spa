AIによる解説

フォルダ構成
backend/
├── config/
│   ├── settings.py  # ← INSTALLED_APPS に 'audit' 追加
│   └── urls.py
├── audit/           # ← 新規作成したアプリ
│   ├── __init__.py
│   ├── models.py      # AuditLog モデル
│   ├── middleware.py  # RequestIDMiddleware
│   ├── utils.py       # create_audit_log など
│   ├── admin.py       # 管理画面登録
│   └── migrations/
├── users/
│   ├── models.py
│   ├── views.py       # ← create_audit_log を呼ぶ
│   └── services/
│       └── user_service.py  # ← create_audit_log を呼ぶ
└── accounts/
    └── views.py       # ← create_audit_log を呼ぶ


仕組みの流れ

# 監査ログシステムの使い方ガイド

## 📁 セットアップ手順

### 1. audit アプリを作成
```bash
cd backend
python manage.py startapp audit
```

### 2. settings.py に追加
```python
# backend/config/settings.py

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    
    # サードパーティ
    "rest_framework",
    "corsheaders",
    "django_filters",
    
    # 自作アプリ
    "accounts",
    "users",
    "audit",  # ⭐ 追加
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "audit.middleware.RequestIDMiddleware",  # ⭐ 追加（早めに配置）
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]
```

### 3. マイグレーション実行
```bash
python manage.py makemigrations audit
python manage.py migrate audit
```

---

## 🔄 システムの動作フロー

```
1. クライアントからリクエスト
   ↓
2. RequestIDMiddleware が X-Request-ID を取得/生成
   ↓ (スレッドローカルに保存)
3. ビューやサービスで create_audit_log() を呼ぶ
   ↓
4. AuditLog テーブルに記録される
   ↓
5. レスポンスに X-Request-ID ヘッダーを追加
```

---

## 📝 基本的な使い方

### パターン1: ビューで記録する

```python
# backend/users/views.py
from audit.utils import create_audit_log

class UserViewSet(viewsets.ModelViewSet):
    
    def destroy(self, request, *args, **kwargs):
        """ユーザー削除"""
        instance = self.get_object()
        
        try:
            UserService.delete_user(instance)
            
            # ⭐ 監査ログを記録
            create_audit_log(
                action='DELETE',
                model_name='User',
                object_id=instance.id,
                request=request  # 省略可（自動取得される）
            )
            
            return Response(status=status.HTTP_204_NO_CONTENT)
        except ValidationError as e:
            # ⭐ エラーも記録
            create_audit_log(
                action='DELETE',
                model_name='User',
                object_id=instance.id,
                success=False,
                error_message=str(e),
                request=request
            )
            return Response({'detail': str(e)}, status=400)
```

### パターン2: サービス層で記録する（推奨）

```python
# backend/users/services/user_service.py
from audit.utils import create_audit_log, get_model_changes

class UserService:
    
    @staticmethod
    @transaction.atomic
    def update_user(user_instance, validated_data):
        """ユーザー更新"""
        
        # 変更内容を記録
        changes = get_model_changes(user_instance, validated_data)
        
        # ... 更新処理 ...
        
        # ⭐ 監査ログを記録（request は自動取得）
        create_audit_log(
            action='UPDATE',
            model_name='User',
            object_id=user_instance.id,
            changes=changes
        )
        
        return user_instance
```

### パターン3: ログイン/ログアウトで記録

```python
# backend/accounts/views.py
from audit.utils import create_audit_log

class LoginAPIView(APIView):
    def post(self, request):
        # ... 認証処理 ...
        
        if user:
            login(request, user)
            
            # ⭐ ログイン成功を記録
            create_audit_log(
                action='LOGIN',
                model_name='User',
                object_id=user.id
            )
            return Response(...)
        else:
            # ⭐ ログイン失敗を記録
            create_audit_log(
                action='LOGIN_FAILED',
                model_name='User',
                success=False,
                error_message=f'認証失敗: {employee_id}'
            )
            return Response(...)
```

---

## 🆕 新しいモデル（例: Product）で使う場合

### 1. models.py
```python
# backend/products/models.py
from django.db import models

class Product(models.Model):
    name = models.CharField('商品名', max_length=100)
    price = models.IntegerField('価格')
    stock = models.IntegerField('在庫数')
```

### 2. services/product_service.py
```python
# backend/products/services/product_service.py
from audit.utils import create_audit_log, get_model_changes
from django.db import transaction

class ProductService:
    
    @staticmethod
    @transaction.atomic
    def create_product(validated_data):
        """商品作成"""
        product = Product.objects.create(**validated_data)
        
        # ⭐ 作成を記録
        create_audit_log(
            action='CREATE',
            model_name='Product',
            object_id=product.id,
            changes={'created': validated_data}
        )
        
        return product
    
    @staticmethod
    @transaction.atomic
    def update_product(product_instance, validated_data):
        """商品更新"""
        changes = get_model_changes(product_instance, validated_data)
        
        for attr, value in validated_data.items():
            setattr(product_instance, attr, value)
        product_instance.save()
        
        # ⭐ 更新を記録
        create_audit_log(
            action='UPDATE',
            model_name='Product',
            object_id=product_instance.id,
            changes=changes
        )
        
        return product_instance
    
    @staticmethod
    @transaction.atomic
    def delete_product(product_instance):
        """商品削除"""
        product_id = product_instance.id
        product_instance.delete()
        
        # ⭐ 削除を記録
        create_audit_log(
            action='DELETE',
            model_name='Product',
            object_id=product_id
        )
```

### 3. views.py
```python
# backend/products/views.py
from rest_framework import viewsets
from .services.product_service import ProductService

class ProductViewSet(viewsets.ModelViewSet):
    
    def create(self, request, *args, **kwargs):
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        
        # サービス層で監査ログも記録される
        product = ProductService.create_product(serializer.validated_data)
        
        return Response(...)
```

---

## 📊 記録される情報

### AuditLog テーブルのフィールド

| フィールド | 説明 | 例 |
|-----------|------|-----|
| `request_id` | リクエスト識別ID | `550e8400-e29b-41d4-a716-446655440000` |
| `user` | 実行ユーザー（FK） | User オブジェクト |
| `employee_id` | 社員番号（文字列） | `E001` |
| `username` | ユーザー名 | `山田太郎` |
| `action` | アクション | `CREATE`, `UPDATE`, `DELETE`, `LOGIN` |
| `model_name` | モデル名 | `User`, `Product` |
| `object_id` | オブジェクトID | `123` |
| `changes` | 変更内容（JSON） | `{"name": {"old": "旧", "new": "新"}}` |
| `ip_address` | IPアドレス | `192.168.1.100` |
| `user_agent` | User Agent | `Mozilla/5.0...` |
| `endpoint` | エンドポイント | `/api/users/1/` |
| `method` | HTTPメソッド | `POST`, `PUT`, `DELETE` |
| `success` | 成功フラグ | `True` / `False` |
| `error_message` | エラーメッセージ | `権限がありません` |
| `timestamp` | 実行日時 | `2025-10-10 12:34:56` |

---

## 🔍 ログの確認方法

### 管理画面で確認
```python
# backend/audit/admin.py
from django.contrib import admin
from .models import AuditLog

@admin.register(AuditLog)
class AuditLogAdmin(admin.ModelAdmin):
    list_display = [
        'timestamp', 'request_id', 'employee_id', 
        'action', 'model_name', 'object_id', 'success'
    ]
    list_filter = ['action', 'model_name', 'success', 'timestamp']
    search_fields = ['request_id', 'employee_id', 'ip_address']
    readonly_fields = ['timestamp']
    date_hierarchy = 'timestamp'
```

### API で確認（オプション）
```python
# backend/audit/views.py
from rest_framework import viewsets
from .models import AuditLog
from .serializers import AuditLogSerializer

class AuditLogViewSet(viewsets.ReadOnlyModelViewSet):
    """監査ログ閲覧API（管理者のみ）"""
    queryset = AuditLog.objects.all()
    serializer_class = AuditLogSerializer
    permission_classes = [IsAuthenticated, IsAdminUser]
    filterset_fields = ['action', 'model_name', 'user', 'success']
    search_fields = ['request_id', 'employee_id', 'endpoint']
    ordering = ['-timestamp']
```

---

## ⚡ よくある質問

### Q1: request を渡さなくても動くの？
**A:** はい！`get_current_request()` がスレッドローカルから自動取得します。

```python
# どちらでもOK
create_audit_log(action='DELETE', model_name='User', object_id=1)
create_audit_log(action='DELETE', model_name='User', object_id=1, request=request)
```

### Q2: X-Request-ID はどうやって送る？
**A:** フロントエンドで送るか、Apache/Nginx で自動付与。

```javascript
// Vue axios で送る例
axios.put('/api/users/1/', data, {
    headers: {
        'X-Request-ID': crypto.randomUUID()
    }
});
```

### Q3: ログが多すぎて重くならない？
**A:** インデックスが張られているので高速。古いログは定期削除推奨。

```python
# 90日以上前のログを削除（管理コマンド）
from django.utils import timezone
from datetime import timedelta

threshold = timezone.now() - timedelta(days=90)
AuditLog.objects.filter(timestamp__lt=threshold).delete()
```

---

## 🎯 まとめ

1. **audit アプリを作成**して models.py, middleware.py, utils.py を配置
2. **settings.py に追加**（INSTALLED_APPS + MIDDLEWARE）
3. **マイグレーション実行**
4. **サービス層やビューで `create_audit_log()` を呼ぶだけ**
5. **管理画面やAPIでログを確認**

これで誰が・いつ・何を・どう変更したかが全て記録されます！(´・ω・`)b


--------------------------------------------------------------------------------------
重要ポイント
1. スレッドローカルの仕組み

# ミドルウェアで保存
_thread_locals.request = request
_thread_locals.request_id = request_id

# どこからでも取得可能
def create_audit_log(...):
    request = get_current_request()  # ← 自動で取れる！

2. request 引数は省略可能

# ✅ これでOK（推奨）
create_audit_log(action='UPDATE', model_name='User', object_id=1)

# ✅ これもOK（明示的）
create_audit_log(action='UPDATE', model_name='User', object_id=1, request=request)


3. 新しいアプリで使うときのパターン
# products アプリを作ったら...
from audit.utils import create_audit_log

# サービス層に追加するだけ
ProductService.create_product(...):
    # 処理
    create_audit_log(action='CREATE', model_name='Product', object_id=product.id)

